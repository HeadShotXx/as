import os
import argparse

def xor_obfuscate(input_string, key):
    """XORs the input string with the given key."""
    return bytes([c ^ k for c, k in zip(input_string.encode(), key * (len(input_string) // len(key) + 1))])

def generate_rust_code(input_string, key_length=4):
    """Generates Rust code with an XOR-obfuscated string."""
    key = os.urandom(key_length)
    obfuscated_data = xor_obfuscate(input_string, key)

    rust_code = f"""
// Generated by Python XOR Obfuscator

fn xor_decrypt(data: &[u8], key: &[u8]) -> String {{
    data.iter()
        .zip(key.iter().cycle())
        .map(|(&x, &y)| (x ^ y) as char)
        .collect()
}}

fn main() {{
    let encrypted_string: [u8; {len(obfuscated_data)}] = {list(obfuscated_data)};
    let key: [u8; {len(key)}] = {list(key)};

    let decrypted_string = xor_decrypt(&encrypted_string, &key);

    // Using the decrypted string in Rust
    // For example, printing it:
    println!("Decrypted string: {{}}", decrypted_string);

    // Or if it's a command, you could (carefully!) execute it
    // Be very careful with executing decrypted commands, as it can be a security risk.
    /*
    use std::process::Command;
    let output = Command::new("sh")
                         .arg("-c")
                         .arg(&decrypted_string)
                         .output()
                         .expect("Failed to execute command");

    println!("status: {{}}", output.status);
    println!("stdout: {{}}", String::from_utf8_lossy(&output.stdout));
    println!("stderr: {{}}", String::from_utf8_lossy(&output.stderr));
    */
}}
"""
    return rust_code

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Obfuscate a string for use in Rust with XOR.")
    parser.add_argument("string_to_obfuscate", type=str, help="The string to obfuscate.")
    parser.add_argument("--key-length", type=int, default=8, help="Length of the random key to generate.")
    args = parser.parse_args()

    rust_output = generate_rust_code(args.string_to_obfuscate, args.key_length)
    print(rust_output)
    print("\\n// To use this in your Rust project, copy the code above.")
    print("// You can then call a function with the decrypted string.")
    print("// To compile and run a standalone file: ")
    print("// 1. rustc -o my_program my_program.rs")
    print("// 2. ./my_program")
